// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/sms/sms.proto

/*
Package iunite_club_srv_message_sms is a generated protocol buffer package.

It is generated from these files:
	proto/sms/sms.proto

It has these top-level messages:
	ValidateMobileCodeRequest
	ValidateResponse
	SendVerifyCodeRequest
	SendResponse
*/
package iunite_club_srv_message_sms

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SMS service

type SMSService interface {
	SendVerifyCode(ctx context.Context, in *SendVerifyCodeRequest, opts ...client.CallOption) (*SendResponse, error)
	ValidateMobileCode(ctx context.Context, in *ValidateMobileCodeRequest, opts ...client.CallOption) (*ValidateResponse, error)
}

type sMSService struct {
	c    client.Client
	name string
}

func NewSMSService(name string, c client.Client) SMSService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.srv.message.sms"
	}
	return &sMSService{
		c:    c,
		name: name,
	}
}

func (c *sMSService) SendVerifyCode(ctx context.Context, in *SendVerifyCodeRequest, opts ...client.CallOption) (*SendResponse, error) {
	req := c.c.NewRequest(c.name, "SMS.SendVerifyCode", in)
	out := new(SendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSService) ValidateMobileCode(ctx context.Context, in *ValidateMobileCodeRequest, opts ...client.CallOption) (*ValidateResponse, error) {
	req := c.c.NewRequest(c.name, "SMS.ValidateMobileCode", in)
	out := new(ValidateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SMS service

type SMSHandler interface {
	SendVerifyCode(context.Context, *SendVerifyCodeRequest, *SendResponse) error
	ValidateMobileCode(context.Context, *ValidateMobileCodeRequest, *ValidateResponse) error
}

func RegisterSMSHandler(s server.Server, hdlr SMSHandler, opts ...server.HandlerOption) {
	type sMS interface {
		SendVerifyCode(ctx context.Context, in *SendVerifyCodeRequest, out *SendResponse) error
		ValidateMobileCode(ctx context.Context, in *ValidateMobileCodeRequest, out *ValidateResponse) error
	}
	type SMS struct {
		sMS
	}
	h := &sMSHandler{hdlr}
	s.Handle(s.NewHandler(&SMS{h}, opts...))
}

type sMSHandler struct {
	SMSHandler
}

func (h *sMSHandler) SendVerifyCode(ctx context.Context, in *SendVerifyCodeRequest, out *SendResponse) error {
	return h.SMSHandler.SendVerifyCode(ctx, in, out)
}

func (h *sMSHandler) ValidateMobileCode(ctx context.Context, in *ValidateMobileCodeRequest, out *ValidateResponse) error {
	return h.SMSHandler.ValidateMobileCode(ctx, in, out)
}
