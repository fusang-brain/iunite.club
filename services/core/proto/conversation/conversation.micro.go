// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/conversation/conversation.proto

/*
Package iunite_club_srv_core_conversation is a generated protocol buffer package.

It is generated from these files:
	proto/conversation/conversation.proto

It has these top-level messages:
	WithIDAndMembers
	WithIDAndUserID
	WithID
	UpdatedOK
	WithMarkedBundle
	CreatedConversationOK
	CreatedOK
	WithNoticeBundle
	NoticePB
	NoticesResponse
	ByIDWithPager
	ByNoticeID
	MembersResponse
	WithUpdateBundle
	IsOK
	ConversationDetails
	ByID
	ByIDWithUserID
	ConversationsResponse
	ByUserID
	ConversationPB
	ConversationMember
	UserMetaData
	ConversationMetaData
	WithConversationBundle
*/
package iunite_club_srv_core_conversation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "iunite.club/services/user/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Conversation service

type ConversationService interface {
	CreateConversation(ctx context.Context, in *WithConversationBundle, opts ...client.CallOption) (*CreatedConversationOK, error)
	GetConversationsByMemberID(ctx context.Context, in *ByUserID, opts ...client.CallOption) (*ConversationsResponse, error)
	FindConversationDetails(ctx context.Context, in *ByID, opts ...client.CallOption) (*ConversationDetails, error)
	ExitGroup(ctx context.Context, in *ByIDWithUserID, opts ...client.CallOption) (*IsOK, error)
	DismissGroup(ctx context.Context, in *ByIDWithUserID, opts ...client.CallOption) (*IsOK, error)
	UpdateGroupConversation(ctx context.Context, in *WithUpdateBundle, opts ...client.CallOption) (*IsOK, error)
	GetAllMembersOfConversation(ctx context.Context, in *ByID, opts ...client.CallOption) (*MembersResponse, error)
	RemoveConversationNotice(ctx context.Context, in *ByNoticeID, opts ...client.CallOption) (*IsOK, error)
	GetNoticeList(ctx context.Context, in *ByIDWithPager, opts ...client.CallOption) (*NoticesResponse, error)
	CreateNotice(ctx context.Context, in *WithNoticeBundle, opts ...client.CallOption) (*CreatedOK, error)
	MarkedNoticeToHasRead(ctx context.Context, in *WithMarkedBundle, opts ...client.CallOption) (*UpdatedOK, error)
	AddGroupMember(ctx context.Context, in *WithIDAndMembers, opts ...client.CallOption) (*UpdatedOK, error)
	RemoveGroupMember(ctx context.Context, in *WithIDAndMembers, opts ...client.CallOption) (*UpdatedOK, error)
	JoinInGroup(ctx context.Context, in *WithIDAndUserID, opts ...client.CallOption) (*IsOK, error)
}

type conversationService struct {
	c    client.Client
	name string
}

func NewConversationService(name string, c client.Client) ConversationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.srv.core.conversation"
	}
	return &conversationService{
		c:    c,
		name: name,
	}
}

func (c *conversationService) CreateConversation(ctx context.Context, in *WithConversationBundle, opts ...client.CallOption) (*CreatedConversationOK, error) {
	req := c.c.NewRequest(c.name, "Conversation.CreateConversation", in)
	out := new(CreatedConversationOK)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationService) GetConversationsByMemberID(ctx context.Context, in *ByUserID, opts ...client.CallOption) (*ConversationsResponse, error) {
	req := c.c.NewRequest(c.name, "Conversation.GetConversationsByMemberID", in)
	out := new(ConversationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationService) FindConversationDetails(ctx context.Context, in *ByID, opts ...client.CallOption) (*ConversationDetails, error) {
	req := c.c.NewRequest(c.name, "Conversation.FindConversationDetails", in)
	out := new(ConversationDetails)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationService) ExitGroup(ctx context.Context, in *ByIDWithUserID, opts ...client.CallOption) (*IsOK, error) {
	req := c.c.NewRequest(c.name, "Conversation.ExitGroup", in)
	out := new(IsOK)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationService) DismissGroup(ctx context.Context, in *ByIDWithUserID, opts ...client.CallOption) (*IsOK, error) {
	req := c.c.NewRequest(c.name, "Conversation.DismissGroup", in)
	out := new(IsOK)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationService) UpdateGroupConversation(ctx context.Context, in *WithUpdateBundle, opts ...client.CallOption) (*IsOK, error) {
	req := c.c.NewRequest(c.name, "Conversation.UpdateGroupConversation", in)
	out := new(IsOK)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationService) GetAllMembersOfConversation(ctx context.Context, in *ByID, opts ...client.CallOption) (*MembersResponse, error) {
	req := c.c.NewRequest(c.name, "Conversation.GetAllMembersOfConversation", in)
	out := new(MembersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationService) RemoveConversationNotice(ctx context.Context, in *ByNoticeID, opts ...client.CallOption) (*IsOK, error) {
	req := c.c.NewRequest(c.name, "Conversation.RemoveConversationNotice", in)
	out := new(IsOK)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationService) GetNoticeList(ctx context.Context, in *ByIDWithPager, opts ...client.CallOption) (*NoticesResponse, error) {
	req := c.c.NewRequest(c.name, "Conversation.GetNoticeList", in)
	out := new(NoticesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationService) CreateNotice(ctx context.Context, in *WithNoticeBundle, opts ...client.CallOption) (*CreatedOK, error) {
	req := c.c.NewRequest(c.name, "Conversation.CreateNotice", in)
	out := new(CreatedOK)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationService) MarkedNoticeToHasRead(ctx context.Context, in *WithMarkedBundle, opts ...client.CallOption) (*UpdatedOK, error) {
	req := c.c.NewRequest(c.name, "Conversation.MarkedNoticeToHasRead", in)
	out := new(UpdatedOK)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationService) AddGroupMember(ctx context.Context, in *WithIDAndMembers, opts ...client.CallOption) (*UpdatedOK, error) {
	req := c.c.NewRequest(c.name, "Conversation.AddGroupMember", in)
	out := new(UpdatedOK)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationService) RemoveGroupMember(ctx context.Context, in *WithIDAndMembers, opts ...client.CallOption) (*UpdatedOK, error) {
	req := c.c.NewRequest(c.name, "Conversation.RemoveGroupMember", in)
	out := new(UpdatedOK)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationService) JoinInGroup(ctx context.Context, in *WithIDAndUserID, opts ...client.CallOption) (*IsOK, error) {
	req := c.c.NewRequest(c.name, "Conversation.JoinInGroup", in)
	out := new(IsOK)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Conversation service

type ConversationHandler interface {
	CreateConversation(context.Context, *WithConversationBundle, *CreatedConversationOK) error
	GetConversationsByMemberID(context.Context, *ByUserID, *ConversationsResponse) error
	FindConversationDetails(context.Context, *ByID, *ConversationDetails) error
	ExitGroup(context.Context, *ByIDWithUserID, *IsOK) error
	DismissGroup(context.Context, *ByIDWithUserID, *IsOK) error
	UpdateGroupConversation(context.Context, *WithUpdateBundle, *IsOK) error
	GetAllMembersOfConversation(context.Context, *ByID, *MembersResponse) error
	RemoveConversationNotice(context.Context, *ByNoticeID, *IsOK) error
	GetNoticeList(context.Context, *ByIDWithPager, *NoticesResponse) error
	CreateNotice(context.Context, *WithNoticeBundle, *CreatedOK) error
	MarkedNoticeToHasRead(context.Context, *WithMarkedBundle, *UpdatedOK) error
	AddGroupMember(context.Context, *WithIDAndMembers, *UpdatedOK) error
	RemoveGroupMember(context.Context, *WithIDAndMembers, *UpdatedOK) error
	JoinInGroup(context.Context, *WithIDAndUserID, *IsOK) error
}

func RegisterConversationHandler(s server.Server, hdlr ConversationHandler, opts ...server.HandlerOption) {
	type conversation interface {
		CreateConversation(ctx context.Context, in *WithConversationBundle, out *CreatedConversationOK) error
		GetConversationsByMemberID(ctx context.Context, in *ByUserID, out *ConversationsResponse) error
		FindConversationDetails(ctx context.Context, in *ByID, out *ConversationDetails) error
		ExitGroup(ctx context.Context, in *ByIDWithUserID, out *IsOK) error
		DismissGroup(ctx context.Context, in *ByIDWithUserID, out *IsOK) error
		UpdateGroupConversation(ctx context.Context, in *WithUpdateBundle, out *IsOK) error
		GetAllMembersOfConversation(ctx context.Context, in *ByID, out *MembersResponse) error
		RemoveConversationNotice(ctx context.Context, in *ByNoticeID, out *IsOK) error
		GetNoticeList(ctx context.Context, in *ByIDWithPager, out *NoticesResponse) error
		CreateNotice(ctx context.Context, in *WithNoticeBundle, out *CreatedOK) error
		MarkedNoticeToHasRead(ctx context.Context, in *WithMarkedBundle, out *UpdatedOK) error
		AddGroupMember(ctx context.Context, in *WithIDAndMembers, out *UpdatedOK) error
		RemoveGroupMember(ctx context.Context, in *WithIDAndMembers, out *UpdatedOK) error
		JoinInGroup(ctx context.Context, in *WithIDAndUserID, out *IsOK) error
	}
	type Conversation struct {
		conversation
	}
	h := &conversationHandler{hdlr}
	s.Handle(s.NewHandler(&Conversation{h}, opts...))
}

type conversationHandler struct {
	ConversationHandler
}

func (h *conversationHandler) CreateConversation(ctx context.Context, in *WithConversationBundle, out *CreatedConversationOK) error {
	return h.ConversationHandler.CreateConversation(ctx, in, out)
}

func (h *conversationHandler) GetConversationsByMemberID(ctx context.Context, in *ByUserID, out *ConversationsResponse) error {
	return h.ConversationHandler.GetConversationsByMemberID(ctx, in, out)
}

func (h *conversationHandler) FindConversationDetails(ctx context.Context, in *ByID, out *ConversationDetails) error {
	return h.ConversationHandler.FindConversationDetails(ctx, in, out)
}

func (h *conversationHandler) ExitGroup(ctx context.Context, in *ByIDWithUserID, out *IsOK) error {
	return h.ConversationHandler.ExitGroup(ctx, in, out)
}

func (h *conversationHandler) DismissGroup(ctx context.Context, in *ByIDWithUserID, out *IsOK) error {
	return h.ConversationHandler.DismissGroup(ctx, in, out)
}

func (h *conversationHandler) UpdateGroupConversation(ctx context.Context, in *WithUpdateBundle, out *IsOK) error {
	return h.ConversationHandler.UpdateGroupConversation(ctx, in, out)
}

func (h *conversationHandler) GetAllMembersOfConversation(ctx context.Context, in *ByID, out *MembersResponse) error {
	return h.ConversationHandler.GetAllMembersOfConversation(ctx, in, out)
}

func (h *conversationHandler) RemoveConversationNotice(ctx context.Context, in *ByNoticeID, out *IsOK) error {
	return h.ConversationHandler.RemoveConversationNotice(ctx, in, out)
}

func (h *conversationHandler) GetNoticeList(ctx context.Context, in *ByIDWithPager, out *NoticesResponse) error {
	return h.ConversationHandler.GetNoticeList(ctx, in, out)
}

func (h *conversationHandler) CreateNotice(ctx context.Context, in *WithNoticeBundle, out *CreatedOK) error {
	return h.ConversationHandler.CreateNotice(ctx, in, out)
}

func (h *conversationHandler) MarkedNoticeToHasRead(ctx context.Context, in *WithMarkedBundle, out *UpdatedOK) error {
	return h.ConversationHandler.MarkedNoticeToHasRead(ctx, in, out)
}

func (h *conversationHandler) AddGroupMember(ctx context.Context, in *WithIDAndMembers, out *UpdatedOK) error {
	return h.ConversationHandler.AddGroupMember(ctx, in, out)
}

func (h *conversationHandler) RemoveGroupMember(ctx context.Context, in *WithIDAndMembers, out *UpdatedOK) error {
	return h.ConversationHandler.RemoveGroupMember(ctx, in, out)
}

func (h *conversationHandler) JoinInGroup(ctx context.Context, in *WithIDAndUserID, out *IsOK) error {
	return h.ConversationHandler.JoinInGroup(ctx, in, out)
}
