// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/permission/permission.proto

/*
Package iunite_club_srv_core_permission is a generated protocol buffer package.

It is generated from these files:
	proto/permission/permission.proto

It has these top-level messages:
	ByIDRequest
	DeletedResponse
	CreateRequest
	CreatedPermissionResponse
*/
package iunite_club_srv_core_permission

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Permission service

type PermissionService interface {
	CreatePermission(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreatedPermissionResponse, error)
	DeletePermission(ctx context.Context, in *ByIDRequest, opts ...client.CallOption) (*DeletedResponse, error)
}

type permissionService struct {
	c    client.Client
	name string
}

func NewPermissionService(name string, c client.Client) PermissionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.srv.core.permission"
	}
	return &permissionService{
		c:    c,
		name: name,
	}
}

func (c *permissionService) CreatePermission(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreatedPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "Permission.CreatePermission", in)
	out := new(CreatedPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) DeletePermission(ctx context.Context, in *ByIDRequest, opts ...client.CallOption) (*DeletedResponse, error) {
	req := c.c.NewRequest(c.name, "Permission.DeletePermission", in)
	out := new(DeletedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Permission service

type PermissionHandler interface {
	CreatePermission(context.Context, *CreateRequest, *CreatedPermissionResponse) error
	DeletePermission(context.Context, *ByIDRequest, *DeletedResponse) error
}

func RegisterPermissionHandler(s server.Server, hdlr PermissionHandler, opts ...server.HandlerOption) {
	type permission interface {
		CreatePermission(ctx context.Context, in *CreateRequest, out *CreatedPermissionResponse) error
		DeletePermission(ctx context.Context, in *ByIDRequest, out *DeletedResponse) error
	}
	type Permission struct {
		permission
	}
	h := &permissionHandler{hdlr}
	s.Handle(s.NewHandler(&Permission{h}, opts...))
}

type permissionHandler struct {
	PermissionHandler
}

func (h *permissionHandler) CreatePermission(ctx context.Context, in *CreateRequest, out *CreatedPermissionResponse) error {
	return h.PermissionHandler.CreatePermission(ctx, in, out)
}

func (h *permissionHandler) DeletePermission(ctx context.Context, in *ByIDRequest, out *DeletedResponse) error {
	return h.PermissionHandler.DeletePermission(ctx, in, out)
}
