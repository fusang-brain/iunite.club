// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/contacts/contacts.proto

/*
Package iunite_club_srv_core_contacts is a generated protocol buffer package.

It is generated from these files:
	proto/contacts/contacts.proto

It has these top-level messages:
	UserJob
	UserJobListResponse
	AgreeFriendAcceptRequest
	UpdatedResponse
	FriendAccept
	CountResponse
	FriendAcceptResponse
	AddFriendRequest
	RemoveFriendRequest
	RemovedResponse
	CreatedResponse
	DepartmentRequest
	OrgRequest
	UserCardResponse
	SearchUserRequest
	UsersResponse
	OrganizationsResponse
	FindFriendListRequest
	FriendListResponse
	FindAllGroupRequest
	FindAllGroupResponse
	FindContactsRequest
	ContactsResponse
	UserIDRequest
*/
package iunite_club_srv_core_contacts

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "iunite.club/services/user/proto"
import _ "iunite.club/services/organization/proto"
import _ "iunite.club/services/core/proto/conversation"
import _ "github.com/golang/protobuf/ptypes/struct"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Contacts service

type ContactsService interface {
	FindFriendList(ctx context.Context, in *FindFriendListRequest, opts ...client.CallOption) (*FriendListResponse, error)
	FindAllGroup(ctx context.Context, in *FindAllGroupRequest, opts ...client.CallOption) (*FindAllGroupResponse, error)
	FindContactsList(ctx context.Context, in *FindContactsRequest, opts ...client.CallOption) (*ContactsResponse, error)
	FindDepartmentGroupByUserID(ctx context.Context, in *UserIDRequest, opts ...client.CallOption) (*OrganizationsResponse, error)
	FindUsersByDepartment(ctx context.Context, in *DepartmentRequest, opts ...client.CallOption) (*UserJobListResponse, error)
	FindDepartmentsByOrganization(ctx context.Context, in *OrgRequest, opts ...client.CallOption) (*OrganizationsResponse, error)
	GetUserCardDetails(ctx context.Context, in *UserIDRequest, opts ...client.CallOption) (*UserCardResponse, error)
	SearchUsers(ctx context.Context, in *SearchUserRequest, opts ...client.CallOption) (*UsersResponse, error)
	AddFriend(ctx context.Context, in *AddFriendRequest, opts ...client.CallOption) (*CreatedResponse, error)
	RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...client.CallOption) (*RemovedResponse, error)
	FindFriendAcceptList(ctx context.Context, in *UserIDRequest, opts ...client.CallOption) (*FriendAcceptResponse, error)
	FindFrientAcceptCount(ctx context.Context, in *UserIDRequest, opts ...client.CallOption) (*CountResponse, error)
	AgreeFriendAccept(ctx context.Context, in *AgreeFriendAcceptRequest, opts ...client.CallOption) (*UpdatedResponse, error)
}

type contactsService struct {
	c    client.Client
	name string
}

func NewContactsService(name string, c client.Client) ContactsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.srv.core.contacts"
	}
	return &contactsService{
		c:    c,
		name: name,
	}
}

func (c *contactsService) FindFriendList(ctx context.Context, in *FindFriendListRequest, opts ...client.CallOption) (*FriendListResponse, error) {
	req := c.c.NewRequest(c.name, "Contacts.FindFriendList", in)
	out := new(FriendListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) FindAllGroup(ctx context.Context, in *FindAllGroupRequest, opts ...client.CallOption) (*FindAllGroupResponse, error) {
	req := c.c.NewRequest(c.name, "Contacts.FindAllGroup", in)
	out := new(FindAllGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) FindContactsList(ctx context.Context, in *FindContactsRequest, opts ...client.CallOption) (*ContactsResponse, error) {
	req := c.c.NewRequest(c.name, "Contacts.FindContactsList", in)
	out := new(ContactsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) FindDepartmentGroupByUserID(ctx context.Context, in *UserIDRequest, opts ...client.CallOption) (*OrganizationsResponse, error) {
	req := c.c.NewRequest(c.name, "Contacts.FindDepartmentGroupByUserID", in)
	out := new(OrganizationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) FindUsersByDepartment(ctx context.Context, in *DepartmentRequest, opts ...client.CallOption) (*UserJobListResponse, error) {
	req := c.c.NewRequest(c.name, "Contacts.FindUsersByDepartment", in)
	out := new(UserJobListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) FindDepartmentsByOrganization(ctx context.Context, in *OrgRequest, opts ...client.CallOption) (*OrganizationsResponse, error) {
	req := c.c.NewRequest(c.name, "Contacts.FindDepartmentsByOrganization", in)
	out := new(OrganizationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) GetUserCardDetails(ctx context.Context, in *UserIDRequest, opts ...client.CallOption) (*UserCardResponse, error) {
	req := c.c.NewRequest(c.name, "Contacts.GetUserCardDetails", in)
	out := new(UserCardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) SearchUsers(ctx context.Context, in *SearchUserRequest, opts ...client.CallOption) (*UsersResponse, error) {
	req := c.c.NewRequest(c.name, "Contacts.SearchUsers", in)
	out := new(UsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) AddFriend(ctx context.Context, in *AddFriendRequest, opts ...client.CallOption) (*CreatedResponse, error) {
	req := c.c.NewRequest(c.name, "Contacts.AddFriend", in)
	out := new(CreatedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...client.CallOption) (*RemovedResponse, error) {
	req := c.c.NewRequest(c.name, "Contacts.RemoveFriend", in)
	out := new(RemovedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) FindFriendAcceptList(ctx context.Context, in *UserIDRequest, opts ...client.CallOption) (*FriendAcceptResponse, error) {
	req := c.c.NewRequest(c.name, "Contacts.FindFriendAcceptList", in)
	out := new(FriendAcceptResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) FindFrientAcceptCount(ctx context.Context, in *UserIDRequest, opts ...client.CallOption) (*CountResponse, error) {
	req := c.c.NewRequest(c.name, "Contacts.FindFrientAcceptCount", in)
	out := new(CountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsService) AgreeFriendAccept(ctx context.Context, in *AgreeFriendAcceptRequest, opts ...client.CallOption) (*UpdatedResponse, error) {
	req := c.c.NewRequest(c.name, "Contacts.AgreeFriendAccept", in)
	out := new(UpdatedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Contacts service

type ContactsHandler interface {
	FindFriendList(context.Context, *FindFriendListRequest, *FriendListResponse) error
	FindAllGroup(context.Context, *FindAllGroupRequest, *FindAllGroupResponse) error
	FindContactsList(context.Context, *FindContactsRequest, *ContactsResponse) error
	FindDepartmentGroupByUserID(context.Context, *UserIDRequest, *OrganizationsResponse) error
	FindUsersByDepartment(context.Context, *DepartmentRequest, *UserJobListResponse) error
	FindDepartmentsByOrganization(context.Context, *OrgRequest, *OrganizationsResponse) error
	GetUserCardDetails(context.Context, *UserIDRequest, *UserCardResponse) error
	SearchUsers(context.Context, *SearchUserRequest, *UsersResponse) error
	AddFriend(context.Context, *AddFriendRequest, *CreatedResponse) error
	RemoveFriend(context.Context, *RemoveFriendRequest, *RemovedResponse) error
	FindFriendAcceptList(context.Context, *UserIDRequest, *FriendAcceptResponse) error
	FindFrientAcceptCount(context.Context, *UserIDRequest, *CountResponse) error
	AgreeFriendAccept(context.Context, *AgreeFriendAcceptRequest, *UpdatedResponse) error
}

func RegisterContactsHandler(s server.Server, hdlr ContactsHandler, opts ...server.HandlerOption) {
	type contacts interface {
		FindFriendList(ctx context.Context, in *FindFriendListRequest, out *FriendListResponse) error
		FindAllGroup(ctx context.Context, in *FindAllGroupRequest, out *FindAllGroupResponse) error
		FindContactsList(ctx context.Context, in *FindContactsRequest, out *ContactsResponse) error
		FindDepartmentGroupByUserID(ctx context.Context, in *UserIDRequest, out *OrganizationsResponse) error
		FindUsersByDepartment(ctx context.Context, in *DepartmentRequest, out *UserJobListResponse) error
		FindDepartmentsByOrganization(ctx context.Context, in *OrgRequest, out *OrganizationsResponse) error
		GetUserCardDetails(ctx context.Context, in *UserIDRequest, out *UserCardResponse) error
		SearchUsers(ctx context.Context, in *SearchUserRequest, out *UsersResponse) error
		AddFriend(ctx context.Context, in *AddFriendRequest, out *CreatedResponse) error
		RemoveFriend(ctx context.Context, in *RemoveFriendRequest, out *RemovedResponse) error
		FindFriendAcceptList(ctx context.Context, in *UserIDRequest, out *FriendAcceptResponse) error
		FindFrientAcceptCount(ctx context.Context, in *UserIDRequest, out *CountResponse) error
		AgreeFriendAccept(ctx context.Context, in *AgreeFriendAcceptRequest, out *UpdatedResponse) error
	}
	type Contacts struct {
		contacts
	}
	h := &contactsHandler{hdlr}
	s.Handle(s.NewHandler(&Contacts{h}, opts...))
}

type contactsHandler struct {
	ContactsHandler
}

func (h *contactsHandler) FindFriendList(ctx context.Context, in *FindFriendListRequest, out *FriendListResponse) error {
	return h.ContactsHandler.FindFriendList(ctx, in, out)
}

func (h *contactsHandler) FindAllGroup(ctx context.Context, in *FindAllGroupRequest, out *FindAllGroupResponse) error {
	return h.ContactsHandler.FindAllGroup(ctx, in, out)
}

func (h *contactsHandler) FindContactsList(ctx context.Context, in *FindContactsRequest, out *ContactsResponse) error {
	return h.ContactsHandler.FindContactsList(ctx, in, out)
}

func (h *contactsHandler) FindDepartmentGroupByUserID(ctx context.Context, in *UserIDRequest, out *OrganizationsResponse) error {
	return h.ContactsHandler.FindDepartmentGroupByUserID(ctx, in, out)
}

func (h *contactsHandler) FindUsersByDepartment(ctx context.Context, in *DepartmentRequest, out *UserJobListResponse) error {
	return h.ContactsHandler.FindUsersByDepartment(ctx, in, out)
}

func (h *contactsHandler) FindDepartmentsByOrganization(ctx context.Context, in *OrgRequest, out *OrganizationsResponse) error {
	return h.ContactsHandler.FindDepartmentsByOrganization(ctx, in, out)
}

func (h *contactsHandler) GetUserCardDetails(ctx context.Context, in *UserIDRequest, out *UserCardResponse) error {
	return h.ContactsHandler.GetUserCardDetails(ctx, in, out)
}

func (h *contactsHandler) SearchUsers(ctx context.Context, in *SearchUserRequest, out *UsersResponse) error {
	return h.ContactsHandler.SearchUsers(ctx, in, out)
}

func (h *contactsHandler) AddFriend(ctx context.Context, in *AddFriendRequest, out *CreatedResponse) error {
	return h.ContactsHandler.AddFriend(ctx, in, out)
}

func (h *contactsHandler) RemoveFriend(ctx context.Context, in *RemoveFriendRequest, out *RemovedResponse) error {
	return h.ContactsHandler.RemoveFriend(ctx, in, out)
}

func (h *contactsHandler) FindFriendAcceptList(ctx context.Context, in *UserIDRequest, out *FriendAcceptResponse) error {
	return h.ContactsHandler.FindFriendAcceptList(ctx, in, out)
}

func (h *contactsHandler) FindFrientAcceptCount(ctx context.Context, in *UserIDRequest, out *CountResponse) error {
	return h.ContactsHandler.FindFrientAcceptCount(ctx, in, out)
}

func (h *contactsHandler) AgreeFriendAccept(ctx context.Context, in *AgreeFriendAcceptRequest, out *UpdatedResponse) error {
	return h.ContactsHandler.AgreeFriendAccept(ctx, in, out)
}
