// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/recruitment/recruitment.proto

/*
Package iunite_club_srv_core_recruitment is a generated protocol buffer package.

It is generated from these files:
	proto/recruitment/recruitment.proto

It has these top-level messages:
	FindRecruitmentFormRecordRequest
	RecruitmentFormRecordsResponse
	Response
	AdjustOnePostRequest
	PassedOnePostRequest
	RefusedOnePostRequest
	ByClubIDRequest
	RecruitmentForm
	RecruitmentAnswer
	RecruitmentFormRecord
	RecruitmentFormField
	RecruitmentRecord
	RecruitmentRecordResponse
	RecruitmentRecordFromResponse
	ByRecruitmentRecordBundle
	ByRecruitmentFormBundle
	ByRecruitmentFormID
	ByRecruitmentID
	ByRecruitmentFormRecord
*/
package iunite_club_srv_core_recruitment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/golang/protobuf/ptypes/struct"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Recruitment service

type RecruitmentService interface {
	AdjustOnePost(ctx context.Context, in *AdjustOnePostRequest, opts ...client.CallOption) (*Response, error)
	PassedOnePost(ctx context.Context, in *PassedOnePostRequest, opts ...client.CallOption) (*Response, error)
	RefusedOnePost(ctx context.Context, in *RefusedOnePostRequest, opts ...client.CallOption) (*Response, error)
	FindLatestRecruitmentRecord(ctx context.Context, in *ByClubIDRequest, opts ...client.CallOption) (*RecruitmentRecordResponse, error)
	AddRecruitmentRecord(ctx context.Context, in *ByRecruitmentRecordBundle, opts ...client.CallOption) (*Response, error)
	AddRecruitmentForm(ctx context.Context, in *ByRecruitmentFormBundle, opts ...client.CallOption) (*Response, error)
	FindRecruitmentFormDetails(ctx context.Context, in *ByRecruitmentFormID, opts ...client.CallOption) (*RecruitmentRecordFromResponse, error)
	AddRecruitmentFormRecord(ctx context.Context, in *ByRecruitmentFormRecord, opts ...client.CallOption) (*Response, error)
	EndRecruitment(ctx context.Context, in *ByRecruitmentID, opts ...client.CallOption) (*Response, error)
	FindRecruitmentRecordDetails(ctx context.Context, in *ByRecruitmentID, opts ...client.CallOption) (*RecruitmentRecordResponse, error)
	FindRecruitmentsFormRecordList(ctx context.Context, in *FindRecruitmentFormRecordRequest, opts ...client.CallOption) (*RecruitmentFormRecordsResponse, error)
}

type recruitmentService struct {
	c    client.Client
	name string
}

func NewRecruitmentService(name string, c client.Client) RecruitmentService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.srv.core.recruitment"
	}
	return &recruitmentService{
		c:    c,
		name: name,
	}
}

func (c *recruitmentService) AdjustOnePost(ctx context.Context, in *AdjustOnePostRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Recruitment.AdjustOnePost", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentService) PassedOnePost(ctx context.Context, in *PassedOnePostRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Recruitment.PassedOnePost", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentService) RefusedOnePost(ctx context.Context, in *RefusedOnePostRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Recruitment.RefusedOnePost", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentService) FindLatestRecruitmentRecord(ctx context.Context, in *ByClubIDRequest, opts ...client.CallOption) (*RecruitmentRecordResponse, error) {
	req := c.c.NewRequest(c.name, "Recruitment.FindLatestRecruitmentRecord", in)
	out := new(RecruitmentRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentService) AddRecruitmentRecord(ctx context.Context, in *ByRecruitmentRecordBundle, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Recruitment.AddRecruitmentRecord", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentService) AddRecruitmentForm(ctx context.Context, in *ByRecruitmentFormBundle, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Recruitment.AddRecruitmentForm", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentService) FindRecruitmentFormDetails(ctx context.Context, in *ByRecruitmentFormID, opts ...client.CallOption) (*RecruitmentRecordFromResponse, error) {
	req := c.c.NewRequest(c.name, "Recruitment.FindRecruitmentFormDetails", in)
	out := new(RecruitmentRecordFromResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentService) AddRecruitmentFormRecord(ctx context.Context, in *ByRecruitmentFormRecord, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Recruitment.AddRecruitmentFormRecord", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentService) EndRecruitment(ctx context.Context, in *ByRecruitmentID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Recruitment.EndRecruitment", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentService) FindRecruitmentRecordDetails(ctx context.Context, in *ByRecruitmentID, opts ...client.CallOption) (*RecruitmentRecordResponse, error) {
	req := c.c.NewRequest(c.name, "Recruitment.FindRecruitmentRecordDetails", in)
	out := new(RecruitmentRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentService) FindRecruitmentsFormRecordList(ctx context.Context, in *FindRecruitmentFormRecordRequest, opts ...client.CallOption) (*RecruitmentFormRecordsResponse, error) {
	req := c.c.NewRequest(c.name, "Recruitment.FindRecruitmentsFormRecordList", in)
	out := new(RecruitmentFormRecordsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Recruitment service

type RecruitmentHandler interface {
	AdjustOnePost(context.Context, *AdjustOnePostRequest, *Response) error
	PassedOnePost(context.Context, *PassedOnePostRequest, *Response) error
	RefusedOnePost(context.Context, *RefusedOnePostRequest, *Response) error
	FindLatestRecruitmentRecord(context.Context, *ByClubIDRequest, *RecruitmentRecordResponse) error
	AddRecruitmentRecord(context.Context, *ByRecruitmentRecordBundle, *Response) error
	AddRecruitmentForm(context.Context, *ByRecruitmentFormBundle, *Response) error
	FindRecruitmentFormDetails(context.Context, *ByRecruitmentFormID, *RecruitmentRecordFromResponse) error
	AddRecruitmentFormRecord(context.Context, *ByRecruitmentFormRecord, *Response) error
	EndRecruitment(context.Context, *ByRecruitmentID, *Response) error
	FindRecruitmentRecordDetails(context.Context, *ByRecruitmentID, *RecruitmentRecordResponse) error
	FindRecruitmentsFormRecordList(context.Context, *FindRecruitmentFormRecordRequest, *RecruitmentFormRecordsResponse) error
}

func RegisterRecruitmentHandler(s server.Server, hdlr RecruitmentHandler, opts ...server.HandlerOption) {
	type recruitment interface {
		AdjustOnePost(ctx context.Context, in *AdjustOnePostRequest, out *Response) error
		PassedOnePost(ctx context.Context, in *PassedOnePostRequest, out *Response) error
		RefusedOnePost(ctx context.Context, in *RefusedOnePostRequest, out *Response) error
		FindLatestRecruitmentRecord(ctx context.Context, in *ByClubIDRequest, out *RecruitmentRecordResponse) error
		AddRecruitmentRecord(ctx context.Context, in *ByRecruitmentRecordBundle, out *Response) error
		AddRecruitmentForm(ctx context.Context, in *ByRecruitmentFormBundle, out *Response) error
		FindRecruitmentFormDetails(ctx context.Context, in *ByRecruitmentFormID, out *RecruitmentRecordFromResponse) error
		AddRecruitmentFormRecord(ctx context.Context, in *ByRecruitmentFormRecord, out *Response) error
		EndRecruitment(ctx context.Context, in *ByRecruitmentID, out *Response) error
		FindRecruitmentRecordDetails(ctx context.Context, in *ByRecruitmentID, out *RecruitmentRecordResponse) error
		FindRecruitmentsFormRecordList(ctx context.Context, in *FindRecruitmentFormRecordRequest, out *RecruitmentFormRecordsResponse) error
	}
	type Recruitment struct {
		recruitment
	}
	h := &recruitmentHandler{hdlr}
	s.Handle(s.NewHandler(&Recruitment{h}, opts...))
}

type recruitmentHandler struct {
	RecruitmentHandler
}

func (h *recruitmentHandler) AdjustOnePost(ctx context.Context, in *AdjustOnePostRequest, out *Response) error {
	return h.RecruitmentHandler.AdjustOnePost(ctx, in, out)
}

func (h *recruitmentHandler) PassedOnePost(ctx context.Context, in *PassedOnePostRequest, out *Response) error {
	return h.RecruitmentHandler.PassedOnePost(ctx, in, out)
}

func (h *recruitmentHandler) RefusedOnePost(ctx context.Context, in *RefusedOnePostRequest, out *Response) error {
	return h.RecruitmentHandler.RefusedOnePost(ctx, in, out)
}

func (h *recruitmentHandler) FindLatestRecruitmentRecord(ctx context.Context, in *ByClubIDRequest, out *RecruitmentRecordResponse) error {
	return h.RecruitmentHandler.FindLatestRecruitmentRecord(ctx, in, out)
}

func (h *recruitmentHandler) AddRecruitmentRecord(ctx context.Context, in *ByRecruitmentRecordBundle, out *Response) error {
	return h.RecruitmentHandler.AddRecruitmentRecord(ctx, in, out)
}

func (h *recruitmentHandler) AddRecruitmentForm(ctx context.Context, in *ByRecruitmentFormBundle, out *Response) error {
	return h.RecruitmentHandler.AddRecruitmentForm(ctx, in, out)
}

func (h *recruitmentHandler) FindRecruitmentFormDetails(ctx context.Context, in *ByRecruitmentFormID, out *RecruitmentRecordFromResponse) error {
	return h.RecruitmentHandler.FindRecruitmentFormDetails(ctx, in, out)
}

func (h *recruitmentHandler) AddRecruitmentFormRecord(ctx context.Context, in *ByRecruitmentFormRecord, out *Response) error {
	return h.RecruitmentHandler.AddRecruitmentFormRecord(ctx, in, out)
}

func (h *recruitmentHandler) EndRecruitment(ctx context.Context, in *ByRecruitmentID, out *Response) error {
	return h.RecruitmentHandler.EndRecruitment(ctx, in, out)
}

func (h *recruitmentHandler) FindRecruitmentRecordDetails(ctx context.Context, in *ByRecruitmentID, out *RecruitmentRecordResponse) error {
	return h.RecruitmentHandler.FindRecruitmentRecordDetails(ctx, in, out)
}

func (h *recruitmentHandler) FindRecruitmentsFormRecordList(ctx context.Context, in *FindRecruitmentFormRecordRequest, out *RecruitmentFormRecordsResponse) error {
	return h.RecruitmentHandler.FindRecruitmentsFormRecordList(ctx, in, out)
}
