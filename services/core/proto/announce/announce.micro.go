// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/announce/announce.proto

/*
Package iunite_club_srv_core_announce is a generated protocol buffer package.

It is generated from these files:
	proto/announce/announce.proto

It has these top-level messages:
	MarkedOneToReadRequest
	Response
	ByUserID
	UnreadCountResponse
	AnnounceReceiverPB
	AnnouncePB
	GetAnnouncesRequest
	AnnounceResponse
	CreateInstructionsRequest
	CreateReminderRequest
	CreateTaskRequest
	CreatedResponse
*/
package iunite_club_srv_core_announce

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/golang/protobuf/ptypes/struct"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Announce service

type AnnounceService interface {
	CreateInstructions(ctx context.Context, in *CreateInstructionsRequest, opts ...client.CallOption) (*CreatedResponse, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...client.CallOption) (*CreatedResponse, error)
	CreateReminder(ctx context.Context, in *CreateReminderRequest, opts ...client.CallOption) (*CreatedResponse, error)
	GetAnnounces(ctx context.Context, in *GetAnnouncesRequest, opts ...client.CallOption) (*AnnounceResponse, error)
	GetUnreadCountByUserID(ctx context.Context, in *ByUserID, opts ...client.CallOption) (*UnreadCountResponse, error)
	MarkedOneToRead(ctx context.Context, in *MarkedOneToReadRequest, opts ...client.CallOption) (*Response, error)
}

type announceService struct {
	c    client.Client
	name string
}

func NewAnnounceService(name string, c client.Client) AnnounceService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.srv.core.announce"
	}
	return &announceService{
		c:    c,
		name: name,
	}
}

func (c *announceService) CreateInstructions(ctx context.Context, in *CreateInstructionsRequest, opts ...client.CallOption) (*CreatedResponse, error) {
	req := c.c.NewRequest(c.name, "Announce.CreateInstructions", in)
	out := new(CreatedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announceService) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...client.CallOption) (*CreatedResponse, error) {
	req := c.c.NewRequest(c.name, "Announce.CreateTask", in)
	out := new(CreatedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announceService) CreateReminder(ctx context.Context, in *CreateReminderRequest, opts ...client.CallOption) (*CreatedResponse, error) {
	req := c.c.NewRequest(c.name, "Announce.CreateReminder", in)
	out := new(CreatedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announceService) GetAnnounces(ctx context.Context, in *GetAnnouncesRequest, opts ...client.CallOption) (*AnnounceResponse, error) {
	req := c.c.NewRequest(c.name, "Announce.GetAnnounces", in)
	out := new(AnnounceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announceService) GetUnreadCountByUserID(ctx context.Context, in *ByUserID, opts ...client.CallOption) (*UnreadCountResponse, error) {
	req := c.c.NewRequest(c.name, "Announce.GetUnreadCountByUserID", in)
	out := new(UnreadCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announceService) MarkedOneToRead(ctx context.Context, in *MarkedOneToReadRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Announce.MarkedOneToRead", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Announce service

type AnnounceHandler interface {
	CreateInstructions(context.Context, *CreateInstructionsRequest, *CreatedResponse) error
	CreateTask(context.Context, *CreateTaskRequest, *CreatedResponse) error
	CreateReminder(context.Context, *CreateReminderRequest, *CreatedResponse) error
	GetAnnounces(context.Context, *GetAnnouncesRequest, *AnnounceResponse) error
	GetUnreadCountByUserID(context.Context, *ByUserID, *UnreadCountResponse) error
	MarkedOneToRead(context.Context, *MarkedOneToReadRequest, *Response) error
}

func RegisterAnnounceHandler(s server.Server, hdlr AnnounceHandler, opts ...server.HandlerOption) {
	type announce interface {
		CreateInstructions(ctx context.Context, in *CreateInstructionsRequest, out *CreatedResponse) error
		CreateTask(ctx context.Context, in *CreateTaskRequest, out *CreatedResponse) error
		CreateReminder(ctx context.Context, in *CreateReminderRequest, out *CreatedResponse) error
		GetAnnounces(ctx context.Context, in *GetAnnouncesRequest, out *AnnounceResponse) error
		GetUnreadCountByUserID(ctx context.Context, in *ByUserID, out *UnreadCountResponse) error
		MarkedOneToRead(ctx context.Context, in *MarkedOneToReadRequest, out *Response) error
	}
	type Announce struct {
		announce
	}
	h := &announceHandler{hdlr}
	s.Handle(s.NewHandler(&Announce{h}, opts...))
}

type announceHandler struct {
	AnnounceHandler
}

func (h *announceHandler) CreateInstructions(ctx context.Context, in *CreateInstructionsRequest, out *CreatedResponse) error {
	return h.AnnounceHandler.CreateInstructions(ctx, in, out)
}

func (h *announceHandler) CreateTask(ctx context.Context, in *CreateTaskRequest, out *CreatedResponse) error {
	return h.AnnounceHandler.CreateTask(ctx, in, out)
}

func (h *announceHandler) CreateReminder(ctx context.Context, in *CreateReminderRequest, out *CreatedResponse) error {
	return h.AnnounceHandler.CreateReminder(ctx, in, out)
}

func (h *announceHandler) GetAnnounces(ctx context.Context, in *GetAnnouncesRequest, out *AnnounceResponse) error {
	return h.AnnounceHandler.GetAnnounces(ctx, in, out)
}

func (h *announceHandler) GetUnreadCountByUserID(ctx context.Context, in *ByUserID, out *UnreadCountResponse) error {
	return h.AnnounceHandler.GetUnreadCountByUserID(ctx, in, out)
}

func (h *announceHandler) MarkedOneToRead(ctx context.Context, in *MarkedOneToReadRequest, out *Response) error {
	return h.AnnounceHandler.MarkedOneToRead(ctx, in, out)
}
