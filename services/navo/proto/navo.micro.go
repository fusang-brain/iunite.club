// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/navo.proto

/*
Package iunite_club_api_navo is a generated protocol buffer package.

It is generated from these files:
	proto/navo.proto

It has these top-level messages:
*/
package iunite_club_api_navo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_api "github.com/micro/go-api/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = go_api.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for NavoHandler service

type NavoHandlerService interface {
	TaskCounts(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetHomeCounts(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Pictures(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	CheckUpgrade(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UploadPackage(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type navoHandlerService struct {
	c    client.Client
	name string
}

func NewNavoHandlerService(name string, c client.Client) NavoHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &navoHandlerService{
		c:    c,
		name: name,
	}
}

func (c *navoHandlerService) TaskCounts(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "NavoHandler.TaskCounts", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *navoHandlerService) GetHomeCounts(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "NavoHandler.GetHomeCounts", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *navoHandlerService) Pictures(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "NavoHandler.Pictures", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *navoHandlerService) CheckUpgrade(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "NavoHandler.CheckUpgrade", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *navoHandlerService) UploadPackage(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "NavoHandler.UploadPackage", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NavoHandler service

type NavoHandlerHandler interface {
	TaskCounts(context.Context, *go_api.Request, *go_api.Response) error
	GetHomeCounts(context.Context, *go_api.Request, *go_api.Response) error
	Pictures(context.Context, *go_api.Request, *go_api.Response) error
	CheckUpgrade(context.Context, *go_api.Request, *go_api.Response) error
	UploadPackage(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterNavoHandlerHandler(s server.Server, hdlr NavoHandlerHandler, opts ...server.HandlerOption) error {
	type navoHandler interface {
		TaskCounts(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetHomeCounts(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Pictures(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		CheckUpgrade(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UploadPackage(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type NavoHandler struct {
		navoHandler
	}
	h := &navoHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&NavoHandler{h}, opts...))
}

type navoHandlerHandler struct {
	NavoHandlerHandler
}

func (h *navoHandlerHandler) TaskCounts(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NavoHandlerHandler.TaskCounts(ctx, in, out)
}

func (h *navoHandlerHandler) GetHomeCounts(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NavoHandlerHandler.GetHomeCounts(ctx, in, out)
}

func (h *navoHandlerHandler) Pictures(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NavoHandlerHandler.Pictures(ctx, in, out)
}

func (h *navoHandlerHandler) CheckUpgrade(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NavoHandlerHandler.CheckUpgrade(ctx, in, out)
}

func (h *navoHandlerHandler) UploadPackage(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NavoHandlerHandler.UploadPackage(ctx, in, out)
}

// Client API for SMSHandler service

type SMSHandlerService interface {
	SendVerifyCode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	ValidateSimpleCode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type sMSHandlerService struct {
	c    client.Client
	name string
}

func NewSMSHandlerService(name string, c client.Client) SMSHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &sMSHandlerService{
		c:    c,
		name: name,
	}
}

func (c *sMSHandlerService) SendVerifyCode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "SMSHandler.SendVerifyCode", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSHandlerService) ValidateSimpleCode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "SMSHandler.ValidateSimpleCode", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SMSHandler service

type SMSHandlerHandler interface {
	SendVerifyCode(context.Context, *go_api.Request, *go_api.Response) error
	ValidateSimpleCode(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterSMSHandlerHandler(s server.Server, hdlr SMSHandlerHandler, opts ...server.HandlerOption) error {
	type sMSHandler interface {
		SendVerifyCode(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ValidateSimpleCode(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type SMSHandler struct {
		sMSHandler
	}
	h := &sMSHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&SMSHandler{h}, opts...))
}

type sMSHandlerHandler struct {
	SMSHandlerHandler
}

func (h *sMSHandlerHandler) SendVerifyCode(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.SMSHandlerHandler.SendVerifyCode(ctx, in, out)
}

func (h *sMSHandlerHandler) ValidateSimpleCode(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.SMSHandlerHandler.ValidateSimpleCode(ctx, in, out)
}

// Client API for UserHandler service

type UserHandlerService interface {
	Info(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UpdateCurrentOrg(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	ForgetPassword(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AllUser(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetCurrentOrganization(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetAllMembers(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	CreateMember(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	RemvoeMemberFromOrg(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UpdateMember(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetMemberDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	RemoveOrg(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UpdateUserInfo(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	FlagMemberState(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetHotUsers(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UploadAvatar(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	ExportList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DownloadExportTemplate(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UploadUserList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type userHandlerService struct {
	c    client.Client
	name string
}

func NewUserHandlerService(name string, c client.Client) UserHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &userHandlerService{
		c:    c,
		name: name,
	}
}

func (c *userHandlerService) Info(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.Info", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) UpdateCurrentOrg(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.UpdateCurrentOrg", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) ForgetPassword(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.ForgetPassword", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) AllUser(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.AllUser", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) GetCurrentOrganization(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.GetCurrentOrganization", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) GetAllMembers(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.GetAllMembers", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) CreateMember(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.CreateMember", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) RemvoeMemberFromOrg(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.RemvoeMemberFromOrg", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) UpdateMember(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.UpdateMember", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) GetMemberDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.GetMemberDetails", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) RemoveOrg(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.RemoveOrg", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) UpdateUserInfo(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.UpdateUserInfo", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) FlagMemberState(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.FlagMemberState", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) GetHotUsers(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.GetHotUsers", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) UploadAvatar(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.UploadAvatar", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) ExportList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.ExportList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) DownloadExportTemplate(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.DownloadExportTemplate", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHandlerService) UploadUserList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "UserHandler.UploadUserList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserHandler service

type UserHandlerHandler interface {
	Info(context.Context, *go_api.Request, *go_api.Response) error
	UpdateCurrentOrg(context.Context, *go_api.Request, *go_api.Response) error
	ForgetPassword(context.Context, *go_api.Request, *go_api.Response) error
	AllUser(context.Context, *go_api.Request, *go_api.Response) error
	GetCurrentOrganization(context.Context, *go_api.Request, *go_api.Response) error
	GetAllMembers(context.Context, *go_api.Request, *go_api.Response) error
	CreateMember(context.Context, *go_api.Request, *go_api.Response) error
	RemvoeMemberFromOrg(context.Context, *go_api.Request, *go_api.Response) error
	UpdateMember(context.Context, *go_api.Request, *go_api.Response) error
	GetMemberDetails(context.Context, *go_api.Request, *go_api.Response) error
	RemoveOrg(context.Context, *go_api.Request, *go_api.Response) error
	UpdateUserInfo(context.Context, *go_api.Request, *go_api.Response) error
	FlagMemberState(context.Context, *go_api.Request, *go_api.Response) error
	GetHotUsers(context.Context, *go_api.Request, *go_api.Response) error
	UploadAvatar(context.Context, *go_api.Request, *go_api.Response) error
	ExportList(context.Context, *go_api.Request, *go_api.Response) error
	DownloadExportTemplate(context.Context, *go_api.Request, *go_api.Response) error
	UploadUserList(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterUserHandlerHandler(s server.Server, hdlr UserHandlerHandler, opts ...server.HandlerOption) error {
	type userHandler interface {
		Info(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UpdateCurrentOrg(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ForgetPassword(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AllUser(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetCurrentOrganization(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetAllMembers(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		CreateMember(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		RemvoeMemberFromOrg(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UpdateMember(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetMemberDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		RemoveOrg(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UpdateUserInfo(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		FlagMemberState(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetHotUsers(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UploadAvatar(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ExportList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DownloadExportTemplate(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UploadUserList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type UserHandler struct {
		userHandler
	}
	h := &userHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&UserHandler{h}, opts...))
}

type userHandlerHandler struct {
	UserHandlerHandler
}

func (h *userHandlerHandler) Info(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.Info(ctx, in, out)
}

func (h *userHandlerHandler) UpdateCurrentOrg(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.UpdateCurrentOrg(ctx, in, out)
}

func (h *userHandlerHandler) ForgetPassword(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.ForgetPassword(ctx, in, out)
}

func (h *userHandlerHandler) AllUser(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.AllUser(ctx, in, out)
}

func (h *userHandlerHandler) GetCurrentOrganization(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.GetCurrentOrganization(ctx, in, out)
}

func (h *userHandlerHandler) GetAllMembers(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.GetAllMembers(ctx, in, out)
}

func (h *userHandlerHandler) CreateMember(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.CreateMember(ctx, in, out)
}

func (h *userHandlerHandler) RemvoeMemberFromOrg(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.RemvoeMemberFromOrg(ctx, in, out)
}

func (h *userHandlerHandler) UpdateMember(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.UpdateMember(ctx, in, out)
}

func (h *userHandlerHandler) GetMemberDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.GetMemberDetails(ctx, in, out)
}

func (h *userHandlerHandler) RemoveOrg(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.RemoveOrg(ctx, in, out)
}

func (h *userHandlerHandler) UpdateUserInfo(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.UpdateUserInfo(ctx, in, out)
}

func (h *userHandlerHandler) FlagMemberState(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.FlagMemberState(ctx, in, out)
}

func (h *userHandlerHandler) GetHotUsers(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.GetHotUsers(ctx, in, out)
}

func (h *userHandlerHandler) UploadAvatar(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.UploadAvatar(ctx, in, out)
}

func (h *userHandlerHandler) ExportList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.ExportList(ctx, in, out)
}

func (h *userHandlerHandler) DownloadExportTemplate(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.DownloadExportTemplate(ctx, in, out)
}

func (h *userHandlerHandler) UploadUserList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.UserHandlerHandler.UploadUserList(ctx, in, out)
}

// Client API for FileHandler service

type FileHandlerService interface {
	UploadSingleFile(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UploadMutipartFile(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type fileHandlerService struct {
	c    client.Client
	name string
}

func NewFileHandlerService(name string, c client.Client) FileHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &fileHandlerService{
		c:    c,
		name: name,
	}
}

func (c *fileHandlerService) UploadSingleFile(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "FileHandler.UploadSingleFile", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileHandlerService) UploadMutipartFile(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "FileHandler.UploadMutipartFile", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileHandler service

type FileHandlerHandler interface {
	UploadSingleFile(context.Context, *go_api.Request, *go_api.Response) error
	UploadMutipartFile(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterFileHandlerHandler(s server.Server, hdlr FileHandlerHandler, opts ...server.HandlerOption) error {
	type fileHandler interface {
		UploadSingleFile(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UploadMutipartFile(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type FileHandler struct {
		fileHandler
	}
	h := &fileHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&FileHandler{h}, opts...))
}

type fileHandlerHandler struct {
	FileHandlerHandler
}

func (h *fileHandlerHandler) UploadSingleFile(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.FileHandlerHandler.UploadSingleFile(ctx, in, out)
}

func (h *fileHandlerHandler) UploadMutipartFile(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.FileHandlerHandler.UploadMutipartFile(ctx, in, out)
}

// Client API for OrganizationHandler service

type OrganizationHandlerService interface {
	CreateOrganization(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetAllOrgByUserID(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetAllOrgUsersByUserID(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	SearchHotOrganization(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AcceptJoin(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AgreeJoin(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	RefuseJoin(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	FindRefusedAccept(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetDepartmentDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Info(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UploadLogo(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UpdateOrganizationDescription(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetAllOrganizationBySchool(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetOrganizationDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetOrganizationUserInfoDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	SelectOrganizations(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type organizationHandlerService struct {
	c    client.Client
	name string
}

func NewOrganizationHandlerService(name string, c client.Client) OrganizationHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &organizationHandlerService{
		c:    c,
		name: name,
	}
}

func (c *organizationHandlerService) CreateOrganization(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.CreateOrganization", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) GetAllOrgByUserID(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.GetAllOrgByUserID", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) GetAllOrgUsersByUserID(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.GetAllOrgUsersByUserID", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) SearchHotOrganization(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.SearchHotOrganization", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) AcceptJoin(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.AcceptJoin", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) AgreeJoin(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.AgreeJoin", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) RefuseJoin(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.RefuseJoin", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) FindRefusedAccept(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.FindRefusedAccept", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) GetDepartmentDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.GetDepartmentDetails", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) Info(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.Info", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) UploadLogo(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.UploadLogo", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) UpdateOrganizationDescription(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.UpdateOrganizationDescription", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) GetAllOrganizationBySchool(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.GetAllOrganizationBySchool", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) GetOrganizationDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.GetOrganizationDetails", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) GetOrganizationUserInfoDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.GetOrganizationUserInfoDetails", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationHandlerService) SelectOrganizations(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "OrganizationHandler.SelectOrganizations", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrganizationHandler service

type OrganizationHandlerHandler interface {
	CreateOrganization(context.Context, *go_api.Request, *go_api.Response) error
	GetAllOrgByUserID(context.Context, *go_api.Request, *go_api.Response) error
	GetAllOrgUsersByUserID(context.Context, *go_api.Request, *go_api.Response) error
	SearchHotOrganization(context.Context, *go_api.Request, *go_api.Response) error
	AcceptJoin(context.Context, *go_api.Request, *go_api.Response) error
	AgreeJoin(context.Context, *go_api.Request, *go_api.Response) error
	RefuseJoin(context.Context, *go_api.Request, *go_api.Response) error
	FindRefusedAccept(context.Context, *go_api.Request, *go_api.Response) error
	GetDepartmentDetails(context.Context, *go_api.Request, *go_api.Response) error
	Info(context.Context, *go_api.Request, *go_api.Response) error
	UploadLogo(context.Context, *go_api.Request, *go_api.Response) error
	UpdateOrganizationDescription(context.Context, *go_api.Request, *go_api.Response) error
	GetAllOrganizationBySchool(context.Context, *go_api.Request, *go_api.Response) error
	GetOrganizationDetails(context.Context, *go_api.Request, *go_api.Response) error
	GetOrganizationUserInfoDetails(context.Context, *go_api.Request, *go_api.Response) error
	SelectOrganizations(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterOrganizationHandlerHandler(s server.Server, hdlr OrganizationHandlerHandler, opts ...server.HandlerOption) error {
	type organizationHandler interface {
		CreateOrganization(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetAllOrgByUserID(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetAllOrgUsersByUserID(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		SearchHotOrganization(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AcceptJoin(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AgreeJoin(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		RefuseJoin(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		FindRefusedAccept(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetDepartmentDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Info(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UploadLogo(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UpdateOrganizationDescription(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetAllOrganizationBySchool(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetOrganizationDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetOrganizationUserInfoDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		SelectOrganizations(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type OrganizationHandler struct {
		organizationHandler
	}
	h := &organizationHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&OrganizationHandler{h}, opts...))
}

type organizationHandlerHandler struct {
	OrganizationHandlerHandler
}

func (h *organizationHandlerHandler) CreateOrganization(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.CreateOrganization(ctx, in, out)
}

func (h *organizationHandlerHandler) GetAllOrgByUserID(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.GetAllOrgByUserID(ctx, in, out)
}

func (h *organizationHandlerHandler) GetAllOrgUsersByUserID(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.GetAllOrgUsersByUserID(ctx, in, out)
}

func (h *organizationHandlerHandler) SearchHotOrganization(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.SearchHotOrganization(ctx, in, out)
}

func (h *organizationHandlerHandler) AcceptJoin(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.AcceptJoin(ctx, in, out)
}

func (h *organizationHandlerHandler) AgreeJoin(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.AgreeJoin(ctx, in, out)
}

func (h *organizationHandlerHandler) RefuseJoin(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.RefuseJoin(ctx, in, out)
}

func (h *organizationHandlerHandler) FindRefusedAccept(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.FindRefusedAccept(ctx, in, out)
}

func (h *organizationHandlerHandler) GetDepartmentDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.GetDepartmentDetails(ctx, in, out)
}

func (h *organizationHandlerHandler) Info(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.Info(ctx, in, out)
}

func (h *organizationHandlerHandler) UploadLogo(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.UploadLogo(ctx, in, out)
}

func (h *organizationHandlerHandler) UpdateOrganizationDescription(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.UpdateOrganizationDescription(ctx, in, out)
}

func (h *organizationHandlerHandler) GetAllOrganizationBySchool(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.GetAllOrganizationBySchool(ctx, in, out)
}

func (h *organizationHandlerHandler) GetOrganizationDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.GetOrganizationDetails(ctx, in, out)
}

func (h *organizationHandlerHandler) GetOrganizationUserInfoDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.GetOrganizationUserInfoDetails(ctx, in, out)
}

func (h *organizationHandlerHandler) SelectOrganizations(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.OrganizationHandlerHandler.SelectOrganizations(ctx, in, out)
}

// Client API for DepartmentHandler service

type DepartmentHandlerService interface {
	AddDept(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetDepartmentByOrg(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetAllDepartmentByOrg(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	SearchDepartment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AddUserToDepartment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	RemoveUserFromDepartment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AllCanSelectedUsers(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetAllUsersWithDepartment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Update(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Remove(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type departmentHandlerService struct {
	c    client.Client
	name string
}

func NewDepartmentHandlerService(name string, c client.Client) DepartmentHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &departmentHandlerService{
		c:    c,
		name: name,
	}
}

func (c *departmentHandlerService) AddDept(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "DepartmentHandler.AddDept", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentHandlerService) GetDepartmentByOrg(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "DepartmentHandler.GetDepartmentByOrg", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentHandlerService) GetAllDepartmentByOrg(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "DepartmentHandler.GetAllDepartmentByOrg", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentHandlerService) SearchDepartment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "DepartmentHandler.SearchDepartment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentHandlerService) AddUserToDepartment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "DepartmentHandler.AddUserToDepartment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentHandlerService) RemoveUserFromDepartment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "DepartmentHandler.RemoveUserFromDepartment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentHandlerService) AllCanSelectedUsers(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "DepartmentHandler.AllCanSelectedUsers", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentHandlerService) GetAllUsersWithDepartment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "DepartmentHandler.GetAllUsersWithDepartment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentHandlerService) Update(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "DepartmentHandler.Update", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentHandlerService) Remove(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "DepartmentHandler.Remove", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DepartmentHandler service

type DepartmentHandlerHandler interface {
	AddDept(context.Context, *go_api.Request, *go_api.Response) error
	GetDepartmentByOrg(context.Context, *go_api.Request, *go_api.Response) error
	GetAllDepartmentByOrg(context.Context, *go_api.Request, *go_api.Response) error
	SearchDepartment(context.Context, *go_api.Request, *go_api.Response) error
	AddUserToDepartment(context.Context, *go_api.Request, *go_api.Response) error
	RemoveUserFromDepartment(context.Context, *go_api.Request, *go_api.Response) error
	AllCanSelectedUsers(context.Context, *go_api.Request, *go_api.Response) error
	GetAllUsersWithDepartment(context.Context, *go_api.Request, *go_api.Response) error
	Update(context.Context, *go_api.Request, *go_api.Response) error
	Remove(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterDepartmentHandlerHandler(s server.Server, hdlr DepartmentHandlerHandler, opts ...server.HandlerOption) error {
	type departmentHandler interface {
		AddDept(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetDepartmentByOrg(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetAllDepartmentByOrg(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		SearchDepartment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AddUserToDepartment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		RemoveUserFromDepartment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AllCanSelectedUsers(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetAllUsersWithDepartment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Update(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Remove(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type DepartmentHandler struct {
		departmentHandler
	}
	h := &departmentHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&DepartmentHandler{h}, opts...))
}

type departmentHandlerHandler struct {
	DepartmentHandlerHandler
}

func (h *departmentHandlerHandler) AddDept(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DepartmentHandlerHandler.AddDept(ctx, in, out)
}

func (h *departmentHandlerHandler) GetDepartmentByOrg(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DepartmentHandlerHandler.GetDepartmentByOrg(ctx, in, out)
}

func (h *departmentHandlerHandler) GetAllDepartmentByOrg(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DepartmentHandlerHandler.GetAllDepartmentByOrg(ctx, in, out)
}

func (h *departmentHandlerHandler) SearchDepartment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DepartmentHandlerHandler.SearchDepartment(ctx, in, out)
}

func (h *departmentHandlerHandler) AddUserToDepartment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DepartmentHandlerHandler.AddUserToDepartment(ctx, in, out)
}

func (h *departmentHandlerHandler) RemoveUserFromDepartment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DepartmentHandlerHandler.RemoveUserFromDepartment(ctx, in, out)
}

func (h *departmentHandlerHandler) AllCanSelectedUsers(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DepartmentHandlerHandler.AllCanSelectedUsers(ctx, in, out)
}

func (h *departmentHandlerHandler) GetAllUsersWithDepartment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DepartmentHandlerHandler.GetAllUsersWithDepartment(ctx, in, out)
}

func (h *departmentHandlerHandler) Update(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DepartmentHandlerHandler.Update(ctx, in, out)
}

func (h *departmentHandlerHandler) Remove(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.DepartmentHandlerHandler.Remove(ctx, in, out)
}

// Client API for JobHandler service

type JobHandlerService interface {
	CreateJob(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetUsersWithJob(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AllCanSelectedUsers(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AddUsersToJob(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	RemoveUsersFromJob(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetAllJobs(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Update(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Remove(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type jobHandlerService struct {
	c    client.Client
	name string
}

func NewJobHandlerService(name string, c client.Client) JobHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &jobHandlerService{
		c:    c,
		name: name,
	}
}

func (c *jobHandlerService) CreateJob(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "JobHandler.CreateJob", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobHandlerService) GetUsersWithJob(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "JobHandler.GetUsersWithJob", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobHandlerService) AllCanSelectedUsers(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "JobHandler.AllCanSelectedUsers", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobHandlerService) AddUsersToJob(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "JobHandler.AddUsersToJob", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobHandlerService) RemoveUsersFromJob(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "JobHandler.RemoveUsersFromJob", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobHandlerService) GetAllJobs(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "JobHandler.GetAllJobs", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobHandlerService) Update(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "JobHandler.Update", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobHandlerService) Remove(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "JobHandler.Remove", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JobHandler service

type JobHandlerHandler interface {
	CreateJob(context.Context, *go_api.Request, *go_api.Response) error
	GetUsersWithJob(context.Context, *go_api.Request, *go_api.Response) error
	AllCanSelectedUsers(context.Context, *go_api.Request, *go_api.Response) error
	AddUsersToJob(context.Context, *go_api.Request, *go_api.Response) error
	RemoveUsersFromJob(context.Context, *go_api.Request, *go_api.Response) error
	GetAllJobs(context.Context, *go_api.Request, *go_api.Response) error
	Update(context.Context, *go_api.Request, *go_api.Response) error
	Remove(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterJobHandlerHandler(s server.Server, hdlr JobHandlerHandler, opts ...server.HandlerOption) error {
	type jobHandler interface {
		CreateJob(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetUsersWithJob(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AllCanSelectedUsers(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AddUsersToJob(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		RemoveUsersFromJob(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetAllJobs(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Update(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Remove(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type JobHandler struct {
		jobHandler
	}
	h := &jobHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&JobHandler{h}, opts...))
}

type jobHandlerHandler struct {
	JobHandlerHandler
}

func (h *jobHandlerHandler) CreateJob(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.JobHandlerHandler.CreateJob(ctx, in, out)
}

func (h *jobHandlerHandler) GetUsersWithJob(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.JobHandlerHandler.GetUsersWithJob(ctx, in, out)
}

func (h *jobHandlerHandler) AllCanSelectedUsers(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.JobHandlerHandler.AllCanSelectedUsers(ctx, in, out)
}

func (h *jobHandlerHandler) AddUsersToJob(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.JobHandlerHandler.AddUsersToJob(ctx, in, out)
}

func (h *jobHandlerHandler) RemoveUsersFromJob(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.JobHandlerHandler.RemoveUsersFromJob(ctx, in, out)
}

func (h *jobHandlerHandler) GetAllJobs(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.JobHandlerHandler.GetAllJobs(ctx, in, out)
}

func (h *jobHandlerHandler) Update(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.JobHandlerHandler.Update(ctx, in, out)
}

func (h *jobHandlerHandler) Remove(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.JobHandlerHandler.Remove(ctx, in, out)
}

// Client API for RoleHandler service

type RoleHandlerService interface {
	CreateRoleOrGroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AddUsersToRole(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	RemoveUsersFromRole(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetUsersInRole(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetAllCanUseRoles(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UpdateRoleOrGroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DeleteRoleOrGroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type roleHandlerService struct {
	c    client.Client
	name string
}

func NewRoleHandlerService(name string, c client.Client) RoleHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &roleHandlerService{
		c:    c,
		name: name,
	}
}

func (c *roleHandlerService) CreateRoleOrGroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RoleHandler.CreateRoleOrGroup", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleHandlerService) AddUsersToRole(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RoleHandler.AddUsersToRole", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleHandlerService) RemoveUsersFromRole(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RoleHandler.RemoveUsersFromRole", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleHandlerService) GetUsersInRole(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RoleHandler.GetUsersInRole", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleHandlerService) GetAllCanUseRoles(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RoleHandler.GetAllCanUseRoles", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleHandlerService) UpdateRoleOrGroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RoleHandler.UpdateRoleOrGroup", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleHandlerService) DeleteRoleOrGroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RoleHandler.DeleteRoleOrGroup", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleHandler service

type RoleHandlerHandler interface {
	CreateRoleOrGroup(context.Context, *go_api.Request, *go_api.Response) error
	AddUsersToRole(context.Context, *go_api.Request, *go_api.Response) error
	RemoveUsersFromRole(context.Context, *go_api.Request, *go_api.Response) error
	GetUsersInRole(context.Context, *go_api.Request, *go_api.Response) error
	GetAllCanUseRoles(context.Context, *go_api.Request, *go_api.Response) error
	UpdateRoleOrGroup(context.Context, *go_api.Request, *go_api.Response) error
	DeleteRoleOrGroup(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterRoleHandlerHandler(s server.Server, hdlr RoleHandlerHandler, opts ...server.HandlerOption) error {
	type roleHandler interface {
		CreateRoleOrGroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AddUsersToRole(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		RemoveUsersFromRole(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetUsersInRole(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetAllCanUseRoles(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UpdateRoleOrGroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DeleteRoleOrGroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type RoleHandler struct {
		roleHandler
	}
	h := &roleHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&RoleHandler{h}, opts...))
}

type roleHandlerHandler struct {
	RoleHandlerHandler
}

func (h *roleHandlerHandler) CreateRoleOrGroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RoleHandlerHandler.CreateRoleOrGroup(ctx, in, out)
}

func (h *roleHandlerHandler) AddUsersToRole(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RoleHandlerHandler.AddUsersToRole(ctx, in, out)
}

func (h *roleHandlerHandler) RemoveUsersFromRole(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RoleHandlerHandler.RemoveUsersFromRole(ctx, in, out)
}

func (h *roleHandlerHandler) GetUsersInRole(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RoleHandlerHandler.GetUsersInRole(ctx, in, out)
}

func (h *roleHandlerHandler) GetAllCanUseRoles(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RoleHandlerHandler.GetAllCanUseRoles(ctx, in, out)
}

func (h *roleHandlerHandler) UpdateRoleOrGroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RoleHandlerHandler.UpdateRoleOrGroup(ctx, in, out)
}

func (h *roleHandlerHandler) DeleteRoleOrGroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RoleHandlerHandler.DeleteRoleOrGroup(ctx, in, out)
}

// Client API for ContactsHandler service

type ContactsHandlerService interface {
	GetContactsList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetUserCardDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetDepartmentGroupByUserID(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetUsersByDepartmentID(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetDepartmentsByOrganizationID(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	SearchUser(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetAllGroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetFriendList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AddFriend(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetFriendAcceptList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AgreeFriendAccept(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	RemoveFriends(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type contactsHandlerService struct {
	c    client.Client
	name string
}

func NewContactsHandlerService(name string, c client.Client) ContactsHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &contactsHandlerService{
		c:    c,
		name: name,
	}
}

func (c *contactsHandlerService) GetContactsList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ContactsHandler.GetContactsList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsHandlerService) GetUserCardDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ContactsHandler.GetUserCardDetails", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsHandlerService) GetDepartmentGroupByUserID(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ContactsHandler.GetDepartmentGroupByUserID", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsHandlerService) GetUsersByDepartmentID(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ContactsHandler.GetUsersByDepartmentID", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsHandlerService) GetDepartmentsByOrganizationID(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ContactsHandler.GetDepartmentsByOrganizationID", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsHandlerService) SearchUser(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ContactsHandler.SearchUser", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsHandlerService) GetAllGroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ContactsHandler.GetAllGroup", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsHandlerService) GetFriendList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ContactsHandler.GetFriendList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsHandlerService) AddFriend(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ContactsHandler.AddFriend", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsHandlerService) GetFriendAcceptList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ContactsHandler.GetFriendAcceptList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsHandlerService) AgreeFriendAccept(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ContactsHandler.AgreeFriendAccept", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsHandlerService) RemoveFriends(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ContactsHandler.RemoveFriends", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContactsHandler service

type ContactsHandlerHandler interface {
	GetContactsList(context.Context, *go_api.Request, *go_api.Response) error
	GetUserCardDetails(context.Context, *go_api.Request, *go_api.Response) error
	GetDepartmentGroupByUserID(context.Context, *go_api.Request, *go_api.Response) error
	GetUsersByDepartmentID(context.Context, *go_api.Request, *go_api.Response) error
	GetDepartmentsByOrganizationID(context.Context, *go_api.Request, *go_api.Response) error
	SearchUser(context.Context, *go_api.Request, *go_api.Response) error
	GetAllGroup(context.Context, *go_api.Request, *go_api.Response) error
	GetFriendList(context.Context, *go_api.Request, *go_api.Response) error
	AddFriend(context.Context, *go_api.Request, *go_api.Response) error
	GetFriendAcceptList(context.Context, *go_api.Request, *go_api.Response) error
	AgreeFriendAccept(context.Context, *go_api.Request, *go_api.Response) error
	RemoveFriends(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterContactsHandlerHandler(s server.Server, hdlr ContactsHandlerHandler, opts ...server.HandlerOption) error {
	type contactsHandler interface {
		GetContactsList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetUserCardDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetDepartmentGroupByUserID(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetUsersByDepartmentID(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetDepartmentsByOrganizationID(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		SearchUser(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetAllGroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetFriendList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AddFriend(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetFriendAcceptList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AgreeFriendAccept(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		RemoveFriends(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type ContactsHandler struct {
		contactsHandler
	}
	h := &contactsHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ContactsHandler{h}, opts...))
}

type contactsHandlerHandler struct {
	ContactsHandlerHandler
}

func (h *contactsHandlerHandler) GetContactsList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ContactsHandlerHandler.GetContactsList(ctx, in, out)
}

func (h *contactsHandlerHandler) GetUserCardDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ContactsHandlerHandler.GetUserCardDetails(ctx, in, out)
}

func (h *contactsHandlerHandler) GetDepartmentGroupByUserID(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ContactsHandlerHandler.GetDepartmentGroupByUserID(ctx, in, out)
}

func (h *contactsHandlerHandler) GetUsersByDepartmentID(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ContactsHandlerHandler.GetUsersByDepartmentID(ctx, in, out)
}

func (h *contactsHandlerHandler) GetDepartmentsByOrganizationID(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ContactsHandlerHandler.GetDepartmentsByOrganizationID(ctx, in, out)
}

func (h *contactsHandlerHandler) SearchUser(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ContactsHandlerHandler.SearchUser(ctx, in, out)
}

func (h *contactsHandlerHandler) GetAllGroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ContactsHandlerHandler.GetAllGroup(ctx, in, out)
}

func (h *contactsHandlerHandler) GetFriendList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ContactsHandlerHandler.GetFriendList(ctx, in, out)
}

func (h *contactsHandlerHandler) AddFriend(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ContactsHandlerHandler.AddFriend(ctx, in, out)
}

func (h *contactsHandlerHandler) GetFriendAcceptList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ContactsHandlerHandler.GetFriendAcceptList(ctx, in, out)
}

func (h *contactsHandlerHandler) AgreeFriendAccept(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ContactsHandlerHandler.AgreeFriendAccept(ctx, in, out)
}

func (h *contactsHandlerHandler) RemoveFriends(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ContactsHandlerHandler.RemoveFriends(ctx, in, out)
}

// Client API for ActivityHandler service

type ActivityHandlerService interface {
	Create(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	List(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	BatchDelete(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DeleteOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Details(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UndoOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetActivities(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DismissActivity(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	PublishActivity(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type activityHandlerService struct {
	c    client.Client
	name string
}

func NewActivityHandlerService(name string, c client.Client) ActivityHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &activityHandlerService{
		c:    c,
		name: name,
	}
}

func (c *activityHandlerService) Create(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ActivityHandler.Create", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityHandlerService) List(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ActivityHandler.List", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityHandlerService) BatchDelete(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ActivityHandler.BatchDelete", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityHandlerService) DeleteOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ActivityHandler.DeleteOne", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityHandlerService) Details(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ActivityHandler.Details", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityHandlerService) UndoOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ActivityHandler.UndoOne", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityHandlerService) GetActivities(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ActivityHandler.GetActivities", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityHandlerService) DismissActivity(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ActivityHandler.DismissActivity", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityHandlerService) PublishActivity(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ActivityHandler.PublishActivity", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ActivityHandler service

type ActivityHandlerHandler interface {
	Create(context.Context, *go_api.Request, *go_api.Response) error
	List(context.Context, *go_api.Request, *go_api.Response) error
	BatchDelete(context.Context, *go_api.Request, *go_api.Response) error
	DeleteOne(context.Context, *go_api.Request, *go_api.Response) error
	Details(context.Context, *go_api.Request, *go_api.Response) error
	UndoOne(context.Context, *go_api.Request, *go_api.Response) error
	GetActivities(context.Context, *go_api.Request, *go_api.Response) error
	DismissActivity(context.Context, *go_api.Request, *go_api.Response) error
	PublishActivity(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterActivityHandlerHandler(s server.Server, hdlr ActivityHandlerHandler, opts ...server.HandlerOption) error {
	type activityHandler interface {
		Create(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		List(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		BatchDelete(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DeleteOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Details(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UndoOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetActivities(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DismissActivity(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		PublishActivity(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type ActivityHandler struct {
		activityHandler
	}
	h := &activityHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ActivityHandler{h}, opts...))
}

type activityHandlerHandler struct {
	ActivityHandlerHandler
}

func (h *activityHandlerHandler) Create(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ActivityHandlerHandler.Create(ctx, in, out)
}

func (h *activityHandlerHandler) List(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ActivityHandlerHandler.List(ctx, in, out)
}

func (h *activityHandlerHandler) BatchDelete(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ActivityHandlerHandler.BatchDelete(ctx, in, out)
}

func (h *activityHandlerHandler) DeleteOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ActivityHandlerHandler.DeleteOne(ctx, in, out)
}

func (h *activityHandlerHandler) Details(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ActivityHandlerHandler.Details(ctx, in, out)
}

func (h *activityHandlerHandler) UndoOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ActivityHandlerHandler.UndoOne(ctx, in, out)
}

func (h *activityHandlerHandler) GetActivities(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ActivityHandlerHandler.GetActivities(ctx, in, out)
}

func (h *activityHandlerHandler) DismissActivity(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ActivityHandlerHandler.DismissActivity(ctx, in, out)
}

func (h *activityHandlerHandler) PublishActivity(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ActivityHandlerHandler.PublishActivity(ctx, in, out)
}

// Client API for FundingHandler service

type FundingHandlerService interface {
	Create(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	List(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Details(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	BatchDelete(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DeleteOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UndoOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type fundingHandlerService struct {
	c    client.Client
	name string
}

func NewFundingHandlerService(name string, c client.Client) FundingHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &fundingHandlerService{
		c:    c,
		name: name,
	}
}

func (c *fundingHandlerService) Create(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "FundingHandler.Create", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundingHandlerService) List(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "FundingHandler.List", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundingHandlerService) Details(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "FundingHandler.Details", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundingHandlerService) BatchDelete(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "FundingHandler.BatchDelete", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundingHandlerService) DeleteOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "FundingHandler.DeleteOne", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundingHandlerService) UndoOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "FundingHandler.UndoOne", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FundingHandler service

type FundingHandlerHandler interface {
	Create(context.Context, *go_api.Request, *go_api.Response) error
	List(context.Context, *go_api.Request, *go_api.Response) error
	Details(context.Context, *go_api.Request, *go_api.Response) error
	BatchDelete(context.Context, *go_api.Request, *go_api.Response) error
	DeleteOne(context.Context, *go_api.Request, *go_api.Response) error
	UndoOne(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterFundingHandlerHandler(s server.Server, hdlr FundingHandlerHandler, opts ...server.HandlerOption) error {
	type fundingHandler interface {
		Create(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		List(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Details(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		BatchDelete(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DeleteOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UndoOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type FundingHandler struct {
		fundingHandler
	}
	h := &fundingHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&FundingHandler{h}, opts...))
}

type fundingHandlerHandler struct {
	FundingHandlerHandler
}

func (h *fundingHandlerHandler) Create(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.FundingHandlerHandler.Create(ctx, in, out)
}

func (h *fundingHandlerHandler) List(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.FundingHandlerHandler.List(ctx, in, out)
}

func (h *fundingHandlerHandler) Details(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.FundingHandlerHandler.Details(ctx, in, out)
}

func (h *fundingHandlerHandler) BatchDelete(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.FundingHandlerHandler.BatchDelete(ctx, in, out)
}

func (h *fundingHandlerHandler) DeleteOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.FundingHandlerHandler.DeleteOne(ctx, in, out)
}

func (h *fundingHandlerHandler) UndoOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.FundingHandlerHandler.UndoOne(ctx, in, out)
}

// Client API for GoodsBorrowHandler service

type GoodsBorrowHandlerService interface {
	List(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Create(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Details(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	BatchDelete(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DeleteOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UndoOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type goodsBorrowHandlerService struct {
	c    client.Client
	name string
}

func NewGoodsBorrowHandlerService(name string, c client.Client) GoodsBorrowHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &goodsBorrowHandlerService{
		c:    c,
		name: name,
	}
}

func (c *goodsBorrowHandlerService) List(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "GoodsBorrowHandler.List", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsBorrowHandlerService) Create(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "GoodsBorrowHandler.Create", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsBorrowHandlerService) Details(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "GoodsBorrowHandler.Details", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsBorrowHandlerService) BatchDelete(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "GoodsBorrowHandler.BatchDelete", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsBorrowHandlerService) DeleteOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "GoodsBorrowHandler.DeleteOne", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsBorrowHandlerService) UndoOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "GoodsBorrowHandler.UndoOne", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoodsBorrowHandler service

type GoodsBorrowHandlerHandler interface {
	List(context.Context, *go_api.Request, *go_api.Response) error
	Create(context.Context, *go_api.Request, *go_api.Response) error
	Details(context.Context, *go_api.Request, *go_api.Response) error
	BatchDelete(context.Context, *go_api.Request, *go_api.Response) error
	DeleteOne(context.Context, *go_api.Request, *go_api.Response) error
	UndoOne(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterGoodsBorrowHandlerHandler(s server.Server, hdlr GoodsBorrowHandlerHandler, opts ...server.HandlerOption) error {
	type goodsBorrowHandler interface {
		List(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Create(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Details(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		BatchDelete(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DeleteOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UndoOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type GoodsBorrowHandler struct {
		goodsBorrowHandler
	}
	h := &goodsBorrowHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&GoodsBorrowHandler{h}, opts...))
}

type goodsBorrowHandlerHandler struct {
	GoodsBorrowHandlerHandler
}

func (h *goodsBorrowHandlerHandler) List(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.GoodsBorrowHandlerHandler.List(ctx, in, out)
}

func (h *goodsBorrowHandlerHandler) Create(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.GoodsBorrowHandlerHandler.Create(ctx, in, out)
}

func (h *goodsBorrowHandlerHandler) Details(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.GoodsBorrowHandlerHandler.Details(ctx, in, out)
}

func (h *goodsBorrowHandlerHandler) BatchDelete(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.GoodsBorrowHandlerHandler.BatchDelete(ctx, in, out)
}

func (h *goodsBorrowHandlerHandler) DeleteOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.GoodsBorrowHandlerHandler.DeleteOne(ctx, in, out)
}

func (h *goodsBorrowHandlerHandler) UndoOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.GoodsBorrowHandlerHandler.UndoOne(ctx, in, out)
}

// Client API for ApprovedHandler service

type ApprovedHandlerService interface {
	List(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Details(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	ExecuteOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Archive(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	BatchArchive(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	WaitingTaskList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	ListV2(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	ListByPusher(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type approvedHandlerService struct {
	c    client.Client
	name string
}

func NewApprovedHandlerService(name string, c client.Client) ApprovedHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &approvedHandlerService{
		c:    c,
		name: name,
	}
}

func (c *approvedHandlerService) List(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ApprovedHandler.List", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvedHandlerService) Details(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ApprovedHandler.Details", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvedHandlerService) ExecuteOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ApprovedHandler.ExecuteOne", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvedHandlerService) Archive(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ApprovedHandler.Archive", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvedHandlerService) BatchArchive(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ApprovedHandler.BatchArchive", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvedHandlerService) WaitingTaskList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ApprovedHandler.WaitingTaskList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvedHandlerService) ListV2(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ApprovedHandler.ListV2", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvedHandlerService) ListByPusher(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ApprovedHandler.ListByPusher", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApprovedHandler service

type ApprovedHandlerHandler interface {
	List(context.Context, *go_api.Request, *go_api.Response) error
	Details(context.Context, *go_api.Request, *go_api.Response) error
	ExecuteOne(context.Context, *go_api.Request, *go_api.Response) error
	Archive(context.Context, *go_api.Request, *go_api.Response) error
	BatchArchive(context.Context, *go_api.Request, *go_api.Response) error
	WaitingTaskList(context.Context, *go_api.Request, *go_api.Response) error
	ListV2(context.Context, *go_api.Request, *go_api.Response) error
	ListByPusher(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterApprovedHandlerHandler(s server.Server, hdlr ApprovedHandlerHandler, opts ...server.HandlerOption) error {
	type approvedHandler interface {
		List(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Details(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ExecuteOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Archive(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		BatchArchive(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		WaitingTaskList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ListV2(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ListByPusher(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type ApprovedHandler struct {
		approvedHandler
	}
	h := &approvedHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ApprovedHandler{h}, opts...))
}

type approvedHandlerHandler struct {
	ApprovedHandlerHandler
}

func (h *approvedHandlerHandler) List(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ApprovedHandlerHandler.List(ctx, in, out)
}

func (h *approvedHandlerHandler) Details(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ApprovedHandlerHandler.Details(ctx, in, out)
}

func (h *approvedHandlerHandler) ExecuteOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ApprovedHandlerHandler.ExecuteOne(ctx, in, out)
}

func (h *approvedHandlerHandler) Archive(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ApprovedHandlerHandler.Archive(ctx, in, out)
}

func (h *approvedHandlerHandler) BatchArchive(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ApprovedHandlerHandler.BatchArchive(ctx, in, out)
}

func (h *approvedHandlerHandler) WaitingTaskList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ApprovedHandlerHandler.WaitingTaskList(ctx, in, out)
}

func (h *approvedHandlerHandler) ListV2(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ApprovedHandlerHandler.ListV2(ctx, in, out)
}

func (h *approvedHandlerHandler) ListByPusher(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ApprovedHandlerHandler.ListByPusher(ctx, in, out)
}

// Client API for StatisticHandler service

type StatisticHandlerService interface {
	FundingAmount(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	FundingAmount2DMapdata(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	FundingDepartmentList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	ActivityDepartmentList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	ActivityAmountStatistics(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	ActivityAmount2DMapData(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UserPersonCount(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UserCountList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetPeopleOverview2DMapData(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetActivityStatisticsDetailsList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetPeopleStatisticsDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type statisticHandlerService struct {
	c    client.Client
	name string
}

func NewStatisticHandlerService(name string, c client.Client) StatisticHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &statisticHandlerService{
		c:    c,
		name: name,
	}
}

func (c *statisticHandlerService) FundingAmount(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "StatisticHandler.FundingAmount", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticHandlerService) FundingAmount2DMapdata(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "StatisticHandler.FundingAmount2DMapdata", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticHandlerService) FundingDepartmentList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "StatisticHandler.FundingDepartmentList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticHandlerService) ActivityDepartmentList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "StatisticHandler.ActivityDepartmentList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticHandlerService) ActivityAmountStatistics(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "StatisticHandler.ActivityAmountStatistics", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticHandlerService) ActivityAmount2DMapData(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "StatisticHandler.ActivityAmount2DMapData", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticHandlerService) UserPersonCount(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "StatisticHandler.UserPersonCount", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticHandlerService) UserCountList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "StatisticHandler.UserCountList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticHandlerService) GetPeopleOverview2DMapData(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "StatisticHandler.GetPeopleOverview2DMapData", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticHandlerService) GetActivityStatisticsDetailsList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "StatisticHandler.GetActivityStatisticsDetailsList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticHandlerService) GetPeopleStatisticsDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "StatisticHandler.GetPeopleStatisticsDetails", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StatisticHandler service

type StatisticHandlerHandler interface {
	FundingAmount(context.Context, *go_api.Request, *go_api.Response) error
	FundingAmount2DMapdata(context.Context, *go_api.Request, *go_api.Response) error
	FundingDepartmentList(context.Context, *go_api.Request, *go_api.Response) error
	ActivityDepartmentList(context.Context, *go_api.Request, *go_api.Response) error
	ActivityAmountStatistics(context.Context, *go_api.Request, *go_api.Response) error
	ActivityAmount2DMapData(context.Context, *go_api.Request, *go_api.Response) error
	UserPersonCount(context.Context, *go_api.Request, *go_api.Response) error
	UserCountList(context.Context, *go_api.Request, *go_api.Response) error
	GetPeopleOverview2DMapData(context.Context, *go_api.Request, *go_api.Response) error
	GetActivityStatisticsDetailsList(context.Context, *go_api.Request, *go_api.Response) error
	GetPeopleStatisticsDetails(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterStatisticHandlerHandler(s server.Server, hdlr StatisticHandlerHandler, opts ...server.HandlerOption) error {
	type statisticHandler interface {
		FundingAmount(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		FundingAmount2DMapdata(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		FundingDepartmentList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ActivityDepartmentList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ActivityAmountStatistics(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ActivityAmount2DMapData(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UserPersonCount(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UserCountList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetPeopleOverview2DMapData(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetActivityStatisticsDetailsList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetPeopleStatisticsDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type StatisticHandler struct {
		statisticHandler
	}
	h := &statisticHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&StatisticHandler{h}, opts...))
}

type statisticHandlerHandler struct {
	StatisticHandlerHandler
}

func (h *statisticHandlerHandler) FundingAmount(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.StatisticHandlerHandler.FundingAmount(ctx, in, out)
}

func (h *statisticHandlerHandler) FundingAmount2DMapdata(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.StatisticHandlerHandler.FundingAmount2DMapdata(ctx, in, out)
}

func (h *statisticHandlerHandler) FundingDepartmentList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.StatisticHandlerHandler.FundingDepartmentList(ctx, in, out)
}

func (h *statisticHandlerHandler) ActivityDepartmentList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.StatisticHandlerHandler.ActivityDepartmentList(ctx, in, out)
}

func (h *statisticHandlerHandler) ActivityAmountStatistics(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.StatisticHandlerHandler.ActivityAmountStatistics(ctx, in, out)
}

func (h *statisticHandlerHandler) ActivityAmount2DMapData(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.StatisticHandlerHandler.ActivityAmount2DMapData(ctx, in, out)
}

func (h *statisticHandlerHandler) UserPersonCount(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.StatisticHandlerHandler.UserPersonCount(ctx, in, out)
}

func (h *statisticHandlerHandler) UserCountList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.StatisticHandlerHandler.UserCountList(ctx, in, out)
}

func (h *statisticHandlerHandler) GetPeopleOverview2DMapData(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.StatisticHandlerHandler.GetPeopleOverview2DMapData(ctx, in, out)
}

func (h *statisticHandlerHandler) GetActivityStatisticsDetailsList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.StatisticHandlerHandler.GetActivityStatisticsDetailsList(ctx, in, out)
}

func (h *statisticHandlerHandler) GetPeopleStatisticsDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.StatisticHandlerHandler.GetPeopleStatisticsDetails(ctx, in, out)
}

// Client API for CloudHandler service

type CloudHandlerService interface {
	List(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	CreateDIR(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UploadFile(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DeleteOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DownloadFile(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Details(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UpdatePermission(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	ShowFile(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type cloudHandlerService struct {
	c    client.Client
	name string
}

func NewCloudHandlerService(name string, c client.Client) CloudHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &cloudHandlerService{
		c:    c,
		name: name,
	}
}

func (c *cloudHandlerService) List(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "CloudHandler.List", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHandlerService) CreateDIR(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "CloudHandler.CreateDIR", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHandlerService) UploadFile(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "CloudHandler.UploadFile", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHandlerService) DeleteOne(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "CloudHandler.DeleteOne", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHandlerService) DownloadFile(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "CloudHandler.DownloadFile", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHandlerService) Details(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "CloudHandler.Details", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHandlerService) UpdatePermission(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "CloudHandler.UpdatePermission", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHandlerService) ShowFile(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "CloudHandler.ShowFile", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloudHandler service

type CloudHandlerHandler interface {
	List(context.Context, *go_api.Request, *go_api.Response) error
	CreateDIR(context.Context, *go_api.Request, *go_api.Response) error
	UploadFile(context.Context, *go_api.Request, *go_api.Response) error
	DeleteOne(context.Context, *go_api.Request, *go_api.Response) error
	DownloadFile(context.Context, *go_api.Request, *go_api.Response) error
	Details(context.Context, *go_api.Request, *go_api.Response) error
	UpdatePermission(context.Context, *go_api.Request, *go_api.Response) error
	ShowFile(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterCloudHandlerHandler(s server.Server, hdlr CloudHandlerHandler, opts ...server.HandlerOption) error {
	type cloudHandler interface {
		List(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		CreateDIR(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UploadFile(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DeleteOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DownloadFile(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Details(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UpdatePermission(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ShowFile(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type CloudHandler struct {
		cloudHandler
	}
	h := &cloudHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&CloudHandler{h}, opts...))
}

type cloudHandlerHandler struct {
	CloudHandlerHandler
}

func (h *cloudHandlerHandler) List(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.CloudHandlerHandler.List(ctx, in, out)
}

func (h *cloudHandlerHandler) CreateDIR(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.CloudHandlerHandler.CreateDIR(ctx, in, out)
}

func (h *cloudHandlerHandler) UploadFile(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.CloudHandlerHandler.UploadFile(ctx, in, out)
}

func (h *cloudHandlerHandler) DeleteOne(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.CloudHandlerHandler.DeleteOne(ctx, in, out)
}

func (h *cloudHandlerHandler) DownloadFile(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.CloudHandlerHandler.DownloadFile(ctx, in, out)
}

func (h *cloudHandlerHandler) Details(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.CloudHandlerHandler.Details(ctx, in, out)
}

func (h *cloudHandlerHandler) UpdatePermission(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.CloudHandlerHandler.UpdatePermission(ctx, in, out)
}

func (h *cloudHandlerHandler) ShowFile(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.CloudHandlerHandler.ShowFile(ctx, in, out)
}

// Client API for NotifyHanler service

type NotifyHanlerService interface {
	UnreadCount(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetNotifications(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	MarkToRead(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	ClearCurrentNotification(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type notifyHanlerService struct {
	c    client.Client
	name string
}

func NewNotifyHanlerService(name string, c client.Client) NotifyHanlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &notifyHanlerService{
		c:    c,
		name: name,
	}
}

func (c *notifyHanlerService) UnreadCount(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "NotifyHanler.UnreadCount", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyHanlerService) GetNotifications(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "NotifyHanler.GetNotifications", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyHanlerService) MarkToRead(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "NotifyHanler.MarkToRead", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyHanlerService) ClearCurrentNotification(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "NotifyHanler.ClearCurrentNotification", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NotifyHanler service

type NotifyHanlerHandler interface {
	UnreadCount(context.Context, *go_api.Request, *go_api.Response) error
	GetNotifications(context.Context, *go_api.Request, *go_api.Response) error
	MarkToRead(context.Context, *go_api.Request, *go_api.Response) error
	ClearCurrentNotification(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterNotifyHanlerHandler(s server.Server, hdlr NotifyHanlerHandler, opts ...server.HandlerOption) error {
	type notifyHanler interface {
		UnreadCount(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetNotifications(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		MarkToRead(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ClearCurrentNotification(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type NotifyHanler struct {
		notifyHanler
	}
	h := &notifyHanlerHandler{hdlr}
	return s.Handle(s.NewHandler(&NotifyHanler{h}, opts...))
}

type notifyHanlerHandler struct {
	NotifyHanlerHandler
}

func (h *notifyHanlerHandler) UnreadCount(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NotifyHanlerHandler.UnreadCount(ctx, in, out)
}

func (h *notifyHanlerHandler) GetNotifications(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NotifyHanlerHandler.GetNotifications(ctx, in, out)
}

func (h *notifyHanlerHandler) MarkToRead(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NotifyHanlerHandler.MarkToRead(ctx, in, out)
}

func (h *notifyHanlerHandler) ClearCurrentNotification(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.NotifyHanlerHandler.ClearCurrentNotification(ctx, in, out)
}

// Client API for RecruitmentHandler service

type RecruitmentHandlerService interface {
	LatestRecruitmentRecord(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AddRecruitmentRecord(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AddRecruitmentForm(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetRecruitmentFormDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetRecruitmentRecordDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AddRecruitmentFormRecord(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetRecruitmentFormRecordList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DownloadQRCode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	EndRecruitment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	RefusedOnePost(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	PassedOnePost(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AdjustOnePost(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type recruitmentHandlerService struct {
	c    client.Client
	name string
}

func NewRecruitmentHandlerService(name string, c client.Client) RecruitmentHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &recruitmentHandlerService{
		c:    c,
		name: name,
	}
}

func (c *recruitmentHandlerService) LatestRecruitmentRecord(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RecruitmentHandler.LatestRecruitmentRecord", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentHandlerService) AddRecruitmentRecord(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RecruitmentHandler.AddRecruitmentRecord", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentHandlerService) AddRecruitmentForm(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RecruitmentHandler.AddRecruitmentForm", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentHandlerService) GetRecruitmentFormDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RecruitmentHandler.GetRecruitmentFormDetails", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentHandlerService) GetRecruitmentRecordDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RecruitmentHandler.GetRecruitmentRecordDetails", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentHandlerService) AddRecruitmentFormRecord(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RecruitmentHandler.AddRecruitmentFormRecord", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentHandlerService) GetRecruitmentFormRecordList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RecruitmentHandler.GetRecruitmentFormRecordList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentHandlerService) DownloadQRCode(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RecruitmentHandler.DownloadQRCode", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentHandlerService) EndRecruitment(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RecruitmentHandler.EndRecruitment", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentHandlerService) RefusedOnePost(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RecruitmentHandler.RefusedOnePost", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentHandlerService) PassedOnePost(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RecruitmentHandler.PassedOnePost", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recruitmentHandlerService) AdjustOnePost(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "RecruitmentHandler.AdjustOnePost", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RecruitmentHandler service

type RecruitmentHandlerHandler interface {
	LatestRecruitmentRecord(context.Context, *go_api.Request, *go_api.Response) error
	AddRecruitmentRecord(context.Context, *go_api.Request, *go_api.Response) error
	AddRecruitmentForm(context.Context, *go_api.Request, *go_api.Response) error
	GetRecruitmentFormDetails(context.Context, *go_api.Request, *go_api.Response) error
	GetRecruitmentRecordDetails(context.Context, *go_api.Request, *go_api.Response) error
	AddRecruitmentFormRecord(context.Context, *go_api.Request, *go_api.Response) error
	GetRecruitmentFormRecordList(context.Context, *go_api.Request, *go_api.Response) error
	DownloadQRCode(context.Context, *go_api.Request, *go_api.Response) error
	EndRecruitment(context.Context, *go_api.Request, *go_api.Response) error
	RefusedOnePost(context.Context, *go_api.Request, *go_api.Response) error
	PassedOnePost(context.Context, *go_api.Request, *go_api.Response) error
	AdjustOnePost(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterRecruitmentHandlerHandler(s server.Server, hdlr RecruitmentHandlerHandler, opts ...server.HandlerOption) error {
	type recruitmentHandler interface {
		LatestRecruitmentRecord(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AddRecruitmentRecord(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AddRecruitmentForm(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetRecruitmentFormDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetRecruitmentRecordDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AddRecruitmentFormRecord(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetRecruitmentFormRecordList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DownloadQRCode(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		EndRecruitment(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		RefusedOnePost(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		PassedOnePost(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AdjustOnePost(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type RecruitmentHandler struct {
		recruitmentHandler
	}
	h := &recruitmentHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&RecruitmentHandler{h}, opts...))
}

type recruitmentHandlerHandler struct {
	RecruitmentHandlerHandler
}

func (h *recruitmentHandlerHandler) LatestRecruitmentRecord(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RecruitmentHandlerHandler.LatestRecruitmentRecord(ctx, in, out)
}

func (h *recruitmentHandlerHandler) AddRecruitmentRecord(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RecruitmentHandlerHandler.AddRecruitmentRecord(ctx, in, out)
}

func (h *recruitmentHandlerHandler) AddRecruitmentForm(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RecruitmentHandlerHandler.AddRecruitmentForm(ctx, in, out)
}

func (h *recruitmentHandlerHandler) GetRecruitmentFormDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RecruitmentHandlerHandler.GetRecruitmentFormDetails(ctx, in, out)
}

func (h *recruitmentHandlerHandler) GetRecruitmentRecordDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RecruitmentHandlerHandler.GetRecruitmentRecordDetails(ctx, in, out)
}

func (h *recruitmentHandlerHandler) AddRecruitmentFormRecord(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RecruitmentHandlerHandler.AddRecruitmentFormRecord(ctx, in, out)
}

func (h *recruitmentHandlerHandler) GetRecruitmentFormRecordList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RecruitmentHandlerHandler.GetRecruitmentFormRecordList(ctx, in, out)
}

func (h *recruitmentHandlerHandler) DownloadQRCode(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RecruitmentHandlerHandler.DownloadQRCode(ctx, in, out)
}

func (h *recruitmentHandlerHandler) EndRecruitment(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RecruitmentHandlerHandler.EndRecruitment(ctx, in, out)
}

func (h *recruitmentHandlerHandler) RefusedOnePost(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RecruitmentHandlerHandler.RefusedOnePost(ctx, in, out)
}

func (h *recruitmentHandlerHandler) PassedOnePost(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RecruitmentHandlerHandler.PassedOnePost(ctx, in, out)
}

func (h *recruitmentHandlerHandler) AdjustOnePost(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RecruitmentHandlerHandler.AdjustOnePost(ctx, in, out)
}

// Client API for ConversationHandler service

type ConversationHandlerService interface {
	GetConversationsByMemberID(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	CreateConversation(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetConversationDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	ExitGroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DismissGroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	UpdateGroupConversation(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	CreateGroupNotice(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	MarkNoticeToHasRead(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetNoticeList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	RemoveConversationNotice(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	RemoveGroupMember(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	AddGroupMember(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetAllMembersOfConversation(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	JoinGroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type conversationHandlerService struct {
	c    client.Client
	name string
}

func NewConversationHandlerService(name string, c client.Client) ConversationHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &conversationHandlerService{
		c:    c,
		name: name,
	}
}

func (c *conversationHandlerService) GetConversationsByMemberID(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ConversationHandler.GetConversationsByMemberID", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationHandlerService) CreateConversation(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ConversationHandler.CreateConversation", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationHandlerService) GetConversationDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ConversationHandler.GetConversationDetails", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationHandlerService) ExitGroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ConversationHandler.ExitGroup", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationHandlerService) DismissGroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ConversationHandler.DismissGroup", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationHandlerService) UpdateGroupConversation(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ConversationHandler.UpdateGroupConversation", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationHandlerService) CreateGroupNotice(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ConversationHandler.CreateGroupNotice", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationHandlerService) MarkNoticeToHasRead(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ConversationHandler.MarkNoticeToHasRead", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationHandlerService) GetNoticeList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ConversationHandler.GetNoticeList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationHandlerService) RemoveConversationNotice(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ConversationHandler.RemoveConversationNotice", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationHandlerService) RemoveGroupMember(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ConversationHandler.RemoveGroupMember", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationHandlerService) AddGroupMember(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ConversationHandler.AddGroupMember", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationHandlerService) GetAllMembersOfConversation(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ConversationHandler.GetAllMembersOfConversation", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationHandlerService) JoinGroup(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ConversationHandler.JoinGroup", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConversationHandler service

type ConversationHandlerHandler interface {
	GetConversationsByMemberID(context.Context, *go_api.Request, *go_api.Response) error
	CreateConversation(context.Context, *go_api.Request, *go_api.Response) error
	GetConversationDetails(context.Context, *go_api.Request, *go_api.Response) error
	ExitGroup(context.Context, *go_api.Request, *go_api.Response) error
	DismissGroup(context.Context, *go_api.Request, *go_api.Response) error
	UpdateGroupConversation(context.Context, *go_api.Request, *go_api.Response) error
	CreateGroupNotice(context.Context, *go_api.Request, *go_api.Response) error
	MarkNoticeToHasRead(context.Context, *go_api.Request, *go_api.Response) error
	GetNoticeList(context.Context, *go_api.Request, *go_api.Response) error
	RemoveConversationNotice(context.Context, *go_api.Request, *go_api.Response) error
	RemoveGroupMember(context.Context, *go_api.Request, *go_api.Response) error
	AddGroupMember(context.Context, *go_api.Request, *go_api.Response) error
	GetAllMembersOfConversation(context.Context, *go_api.Request, *go_api.Response) error
	JoinGroup(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterConversationHandlerHandler(s server.Server, hdlr ConversationHandlerHandler, opts ...server.HandlerOption) error {
	type conversationHandler interface {
		GetConversationsByMemberID(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		CreateConversation(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetConversationDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		ExitGroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DismissGroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		UpdateGroupConversation(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		CreateGroupNotice(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		MarkNoticeToHasRead(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetNoticeList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		RemoveConversationNotice(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		RemoveGroupMember(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		AddGroupMember(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetAllMembersOfConversation(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		JoinGroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type ConversationHandler struct {
		conversationHandler
	}
	h := &conversationHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ConversationHandler{h}, opts...))
}

type conversationHandlerHandler struct {
	ConversationHandlerHandler
}

func (h *conversationHandlerHandler) GetConversationsByMemberID(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ConversationHandlerHandler.GetConversationsByMemberID(ctx, in, out)
}

func (h *conversationHandlerHandler) CreateConversation(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ConversationHandlerHandler.CreateConversation(ctx, in, out)
}

func (h *conversationHandlerHandler) GetConversationDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ConversationHandlerHandler.GetConversationDetails(ctx, in, out)
}

func (h *conversationHandlerHandler) ExitGroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ConversationHandlerHandler.ExitGroup(ctx, in, out)
}

func (h *conversationHandlerHandler) DismissGroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ConversationHandlerHandler.DismissGroup(ctx, in, out)
}

func (h *conversationHandlerHandler) UpdateGroupConversation(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ConversationHandlerHandler.UpdateGroupConversation(ctx, in, out)
}

func (h *conversationHandlerHandler) CreateGroupNotice(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ConversationHandlerHandler.CreateGroupNotice(ctx, in, out)
}

func (h *conversationHandlerHandler) MarkNoticeToHasRead(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ConversationHandlerHandler.MarkNoticeToHasRead(ctx, in, out)
}

func (h *conversationHandlerHandler) GetNoticeList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ConversationHandlerHandler.GetNoticeList(ctx, in, out)
}

func (h *conversationHandlerHandler) RemoveConversationNotice(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ConversationHandlerHandler.RemoveConversationNotice(ctx, in, out)
}

func (h *conversationHandlerHandler) RemoveGroupMember(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ConversationHandlerHandler.RemoveGroupMember(ctx, in, out)
}

func (h *conversationHandlerHandler) AddGroupMember(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ConversationHandlerHandler.AddGroupMember(ctx, in, out)
}

func (h *conversationHandlerHandler) GetAllMembersOfConversation(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ConversationHandlerHandler.GetAllMembersOfConversation(ctx, in, out)
}

func (h *conversationHandlerHandler) JoinGroup(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ConversationHandlerHandler.JoinGroup(ctx, in, out)
}

// Client API for AnnounceHandler service

type AnnounceHandlerService interface {
	CreateInstructions(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	CreateReminderAnnounce(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	CreateTaskAnnounce(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetAnnounces(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	MarkedToRead(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type announceHandlerService struct {
	c    client.Client
	name string
}

func NewAnnounceHandlerService(name string, c client.Client) AnnounceHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &announceHandlerService{
		c:    c,
		name: name,
	}
}

func (c *announceHandlerService) CreateInstructions(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "AnnounceHandler.CreateInstructions", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announceHandlerService) CreateReminderAnnounce(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "AnnounceHandler.CreateReminderAnnounce", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announceHandlerService) CreateTaskAnnounce(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "AnnounceHandler.CreateTaskAnnounce", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announceHandlerService) GetAnnounces(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "AnnounceHandler.GetAnnounces", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *announceHandlerService) MarkedToRead(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "AnnounceHandler.MarkedToRead", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AnnounceHandler service

type AnnounceHandlerHandler interface {
	CreateInstructions(context.Context, *go_api.Request, *go_api.Response) error
	CreateReminderAnnounce(context.Context, *go_api.Request, *go_api.Response) error
	CreateTaskAnnounce(context.Context, *go_api.Request, *go_api.Response) error
	GetAnnounces(context.Context, *go_api.Request, *go_api.Response) error
	MarkedToRead(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterAnnounceHandlerHandler(s server.Server, hdlr AnnounceHandlerHandler, opts ...server.HandlerOption) error {
	type announceHandler interface {
		CreateInstructions(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		CreateReminderAnnounce(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		CreateTaskAnnounce(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetAnnounces(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		MarkedToRead(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type AnnounceHandler struct {
		announceHandler
	}
	h := &announceHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&AnnounceHandler{h}, opts...))
}

type announceHandlerHandler struct {
	AnnounceHandlerHandler
}

func (h *announceHandlerHandler) CreateInstructions(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.AnnounceHandlerHandler.CreateInstructions(ctx, in, out)
}

func (h *announceHandlerHandler) CreateReminderAnnounce(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.AnnounceHandlerHandler.CreateReminderAnnounce(ctx, in, out)
}

func (h *announceHandlerHandler) CreateTaskAnnounce(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.AnnounceHandlerHandler.CreateTaskAnnounce(ctx, in, out)
}

func (h *announceHandlerHandler) GetAnnounces(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.AnnounceHandlerHandler.GetAnnounces(ctx, in, out)
}

func (h *announceHandlerHandler) MarkedToRead(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.AnnounceHandlerHandler.MarkedToRead(ctx, in, out)
}

// Client API for ManagerHandler service

type ManagerHandlerService interface {
	AgreeOrganizationAccept(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Orgs(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetOrganizations(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	GetOrgDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	DelOrg(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type managerHandlerService struct {
	c    client.Client
	name string
}

func NewManagerHandlerService(name string, c client.Client) ManagerHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.api.navo"
	}
	return &managerHandlerService{
		c:    c,
		name: name,
	}
}

func (c *managerHandlerService) AgreeOrganizationAccept(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ManagerHandler.AgreeOrganizationAccept", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerHandlerService) Orgs(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ManagerHandler.Orgs", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerHandlerService) GetOrganizations(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ManagerHandler.GetOrganizations", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerHandlerService) GetOrgDetails(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ManagerHandler.GetOrgDetails", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerHandlerService) DelOrg(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "ManagerHandler.DelOrg", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ManagerHandler service

type ManagerHandlerHandler interface {
	AgreeOrganizationAccept(context.Context, *go_api.Request, *go_api.Response) error
	Orgs(context.Context, *go_api.Request, *go_api.Response) error
	GetOrganizations(context.Context, *go_api.Request, *go_api.Response) error
	GetOrgDetails(context.Context, *go_api.Request, *go_api.Response) error
	DelOrg(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterManagerHandlerHandler(s server.Server, hdlr ManagerHandlerHandler, opts ...server.HandlerOption) error {
	type managerHandler interface {
		AgreeOrganizationAccept(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Orgs(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetOrganizations(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		GetOrgDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		DelOrg(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type ManagerHandler struct {
		managerHandler
	}
	h := &managerHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&ManagerHandler{h}, opts...))
}

type managerHandlerHandler struct {
	ManagerHandlerHandler
}

func (h *managerHandlerHandler) AgreeOrganizationAccept(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ManagerHandlerHandler.AgreeOrganizationAccept(ctx, in, out)
}

func (h *managerHandlerHandler) Orgs(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ManagerHandlerHandler.Orgs(ctx, in, out)
}

func (h *managerHandlerHandler) GetOrganizations(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ManagerHandlerHandler.GetOrganizations(ctx, in, out)
}

func (h *managerHandlerHandler) GetOrgDetails(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ManagerHandlerHandler.GetOrgDetails(ctx, in, out)
}

func (h *managerHandlerHandler) DelOrg(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.ManagerHandlerHandler.DelOrg(ctx, in, out)
}
