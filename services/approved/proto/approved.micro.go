// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/approved.proto

/*
Package iunite_club_srv_approved is a generated protocol buffer package.

It is generated from these files:
	proto/approved.proto

It has these top-level messages:
	TemplateApprovedFlowPB
	TemplateCustomFieldPB
	TemplateApprovedFlowConfigPB
	ApprovedTemplatePB
	FindTemplatesRequest
	TemplatesResponse
	PostTemplateRequest
	UpdateTemplateRequest
	PostedResponse
	UpdatedResponse
	DeleteTemplateRequest
	DeletedResponse
	ToggleEnableStateReq
*/
package iunite_club_srv_approved

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/golang/protobuf/ptypes/struct"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Approved service

type ApprovedService interface {
	FindTemplates(ctx context.Context, in *FindTemplatesRequest, opts ...client.CallOption) (*TemplatesResponse, error)
	PostTemplate(ctx context.Context, in *PostTemplateRequest, opts ...client.CallOption) (*PostedResponse, error)
	UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...client.CallOption) (*UpdatedResponse, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...client.CallOption) (*DeletedResponse, error)
	ToggleTemplateEnableState(ctx context.Context, in *ToggleEnableStateReq, opts ...client.CallOption) (*UpdatedResponse, error)
}

type approvedService struct {
	c    client.Client
	name string
}

func NewApprovedService(name string, c client.Client) ApprovedService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.srv.approved"
	}
	return &approvedService{
		c:    c,
		name: name,
	}
}

func (c *approvedService) FindTemplates(ctx context.Context, in *FindTemplatesRequest, opts ...client.CallOption) (*TemplatesResponse, error) {
	req := c.c.NewRequest(c.name, "Approved.FindTemplates", in)
	out := new(TemplatesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvedService) PostTemplate(ctx context.Context, in *PostTemplateRequest, opts ...client.CallOption) (*PostedResponse, error) {
	req := c.c.NewRequest(c.name, "Approved.PostTemplate", in)
	out := new(PostedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvedService) UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...client.CallOption) (*UpdatedResponse, error) {
	req := c.c.NewRequest(c.name, "Approved.UpdateTemplate", in)
	out := new(UpdatedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvedService) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...client.CallOption) (*DeletedResponse, error) {
	req := c.c.NewRequest(c.name, "Approved.DeleteTemplate", in)
	out := new(DeletedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvedService) ToggleTemplateEnableState(ctx context.Context, in *ToggleEnableStateReq, opts ...client.CallOption) (*UpdatedResponse, error) {
	req := c.c.NewRequest(c.name, "Approved.ToggleTemplateEnableState", in)
	out := new(UpdatedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Approved service

type ApprovedHandler interface {
	FindTemplates(context.Context, *FindTemplatesRequest, *TemplatesResponse) error
	PostTemplate(context.Context, *PostTemplateRequest, *PostedResponse) error
	UpdateTemplate(context.Context, *UpdateTemplateRequest, *UpdatedResponse) error
	DeleteTemplate(context.Context, *DeleteTemplateRequest, *DeletedResponse) error
	ToggleTemplateEnableState(context.Context, *ToggleEnableStateReq, *UpdatedResponse) error
}

func RegisterApprovedHandler(s server.Server, hdlr ApprovedHandler, opts ...server.HandlerOption) {
	type approved interface {
		FindTemplates(ctx context.Context, in *FindTemplatesRequest, out *TemplatesResponse) error
		PostTemplate(ctx context.Context, in *PostTemplateRequest, out *PostedResponse) error
		UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, out *UpdatedResponse) error
		DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, out *DeletedResponse) error
		ToggleTemplateEnableState(ctx context.Context, in *ToggleEnableStateReq, out *UpdatedResponse) error
	}
	type Approved struct {
		approved
	}
	h := &approvedHandler{hdlr}
	s.Handle(s.NewHandler(&Approved{h}, opts...))
}

type approvedHandler struct {
	ApprovedHandler
}

func (h *approvedHandler) FindTemplates(ctx context.Context, in *FindTemplatesRequest, out *TemplatesResponse) error {
	return h.ApprovedHandler.FindTemplates(ctx, in, out)
}

func (h *approvedHandler) PostTemplate(ctx context.Context, in *PostTemplateRequest, out *PostedResponse) error {
	return h.ApprovedHandler.PostTemplate(ctx, in, out)
}

func (h *approvedHandler) UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, out *UpdatedResponse) error {
	return h.ApprovedHandler.UpdateTemplate(ctx, in, out)
}

func (h *approvedHandler) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, out *DeletedResponse) error {
	return h.ApprovedHandler.DeleteTemplate(ctx, in, out)
}

func (h *approvedHandler) ToggleTemplateEnableState(ctx context.Context, in *ToggleEnableStateReq, out *UpdatedResponse) error {
	return h.ApprovedHandler.ToggleTemplateEnableState(ctx, in, out)
}
