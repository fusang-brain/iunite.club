// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/cloud/cloud.proto

/*
Package iunite_club_srv_storage_cloud is a generated protocol buffer package.

It is generated from these files:
	proto/cloud/cloud.proto

It has these top-level messages:
	ByFileID
	FileResponse
	ItemResponse
	IsOK
	WithDepartmentsByFileID
	WithItemBundle
	IsCreateOK
	CloudPB
	ByParentAndClubID
	ListResponse
	ByID
*/
package iunite_club_srv_storage_cloud

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "iunite.club/services/storage/proto"
import _ "iunite.club/services/user/proto"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CloudDisk service

type CloudDiskService interface {
	FindFile(ctx context.Context, in *ByFileID, opts ...client.CallOption) (*FileResponse, error)
	DeleteOne(ctx context.Context, in *ByID, opts ...client.CallOption) (*IsOK, error)
	UpdatePermission(ctx context.Context, in *WithDepartmentsByFileID, opts ...client.CallOption) (*IsOK, error)
	CreateItem(ctx context.Context, in *WithItemBundle, opts ...client.CallOption) (*IsCreateOK, error)
	List(ctx context.Context, in *ByParentAndClubID, opts ...client.CallOption) (*ListResponse, error)
	GetDetails(ctx context.Context, in *ByID, opts ...client.CallOption) (*ItemResponse, error)
}

type cloudDiskService struct {
	c    client.Client
	name string
}

func NewCloudDiskService(name string, c client.Client) CloudDiskService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.srv.storage.cloud"
	}
	return &cloudDiskService{
		c:    c,
		name: name,
	}
}

func (c *cloudDiskService) FindFile(ctx context.Context, in *ByFileID, opts ...client.CallOption) (*FileResponse, error) {
	req := c.c.NewRequest(c.name, "CloudDisk.FindFile", in)
	out := new(FileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskService) DeleteOne(ctx context.Context, in *ByID, opts ...client.CallOption) (*IsOK, error) {
	req := c.c.NewRequest(c.name, "CloudDisk.DeleteOne", in)
	out := new(IsOK)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskService) UpdatePermission(ctx context.Context, in *WithDepartmentsByFileID, opts ...client.CallOption) (*IsOK, error) {
	req := c.c.NewRequest(c.name, "CloudDisk.UpdatePermission", in)
	out := new(IsOK)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskService) CreateItem(ctx context.Context, in *WithItemBundle, opts ...client.CallOption) (*IsCreateOK, error) {
	req := c.c.NewRequest(c.name, "CloudDisk.CreateItem", in)
	out := new(IsCreateOK)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskService) List(ctx context.Context, in *ByParentAndClubID, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "CloudDisk.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskService) GetDetails(ctx context.Context, in *ByID, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "CloudDisk.GetDetails", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CloudDisk service

type CloudDiskHandler interface {
	FindFile(context.Context, *ByFileID, *FileResponse) error
	DeleteOne(context.Context, *ByID, *IsOK) error
	UpdatePermission(context.Context, *WithDepartmentsByFileID, *IsOK) error
	CreateItem(context.Context, *WithItemBundle, *IsCreateOK) error
	List(context.Context, *ByParentAndClubID, *ListResponse) error
	GetDetails(context.Context, *ByID, *ItemResponse) error
}

func RegisterCloudDiskHandler(s server.Server, hdlr CloudDiskHandler, opts ...server.HandlerOption) {
	type cloudDisk interface {
		FindFile(ctx context.Context, in *ByFileID, out *FileResponse) error
		DeleteOne(ctx context.Context, in *ByID, out *IsOK) error
		UpdatePermission(ctx context.Context, in *WithDepartmentsByFileID, out *IsOK) error
		CreateItem(ctx context.Context, in *WithItemBundle, out *IsCreateOK) error
		List(ctx context.Context, in *ByParentAndClubID, out *ListResponse) error
		GetDetails(ctx context.Context, in *ByID, out *ItemResponse) error
	}
	type CloudDisk struct {
		cloudDisk
	}
	h := &cloudDiskHandler{hdlr}
	s.Handle(s.NewHandler(&CloudDisk{h}, opts...))
}

type cloudDiskHandler struct {
	CloudDiskHandler
}

func (h *cloudDiskHandler) FindFile(ctx context.Context, in *ByFileID, out *FileResponse) error {
	return h.CloudDiskHandler.FindFile(ctx, in, out)
}

func (h *cloudDiskHandler) DeleteOne(ctx context.Context, in *ByID, out *IsOK) error {
	return h.CloudDiskHandler.DeleteOne(ctx, in, out)
}

func (h *cloudDiskHandler) UpdatePermission(ctx context.Context, in *WithDepartmentsByFileID, out *IsOK) error {
	return h.CloudDiskHandler.UpdatePermission(ctx, in, out)
}

func (h *cloudDiskHandler) CreateItem(ctx context.Context, in *WithItemBundle, out *IsCreateOK) error {
	return h.CloudDiskHandler.CreateItem(ctx, in, out)
}

func (h *cloudDiskHandler) List(ctx context.Context, in *ByParentAndClubID, out *ListResponse) error {
	return h.CloudDiskHandler.List(ctx, in, out)
}

func (h *cloudDiskHandler) GetDetails(ctx context.Context, in *ByID, out *ItemResponse) error {
	return h.CloudDiskHandler.GetDetails(ctx, in, out)
}
