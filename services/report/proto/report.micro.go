// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/report.proto

/*
Package iunite_club_srv_report is a generated protocol buffer package.

It is generated from these files:
	proto/report.proto

It has these top-level messages:
	ToggleTemplateEnableReq
	DeleteTemplateRequest
	DeletedResponse
	UpdateTemplateBundle
	UpdatedTemplateResponse
	ByTemplateIDRequest
	TemplateResponse
	FindTemplatesRequest
	TemplatesResponse
	ByIDRequest
	ReportPB
	TemplateConfigPB
	TemplateCustomFieldPB
	ReportTemplatePB
	PostTemplateBundle
	PostTemplateResponse
	PostReportBundle
	PostReportResponse
	FindReportsRequest
	ReportsResponse
	ReportResponse
*/
package iunite_club_srv_report

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "iunite.club/services/user/proto"
import _ "github.com/golang/protobuf/ptypes/struct"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Report service

type ReportService interface {
	FindReports(ctx context.Context, in *FindReportsRequest, opts ...client.CallOption) (*ReportsResponse, error)
	PostReport(ctx context.Context, in *PostReportBundle, opts ...client.CallOption) (*PostReportResponse, error)
	PostTemplate(ctx context.Context, in *PostTemplateBundle, opts ...client.CallOption) (*PostTemplateResponse, error)
	FindTemplates(ctx context.Context, in *FindTemplatesRequest, opts ...client.CallOption) (*TemplatesResponse, error)
	FindOneReport(ctx context.Context, in *ByIDRequest, opts ...client.CallOption) (*ReportResponse, error)
	FindOneTemplate(ctx context.Context, in *ByTemplateIDRequest, opts ...client.CallOption) (*TemplateResponse, error)
	UpdateTemplate(ctx context.Context, in *UpdateTemplateBundle, opts ...client.CallOption) (*UpdatedTemplateResponse, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...client.CallOption) (*DeletedResponse, error)
	ToggleTemplateEnableState(ctx context.Context, in *ToggleTemplateEnableReq, opts ...client.CallOption) (*UpdatedTemplateResponse, error)
}

type reportService struct {
	c    client.Client
	name string
}

func NewReportService(name string, c client.Client) ReportService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.srv.report"
	}
	return &reportService{
		c:    c,
		name: name,
	}
}

func (c *reportService) FindReports(ctx context.Context, in *FindReportsRequest, opts ...client.CallOption) (*ReportsResponse, error) {
	req := c.c.NewRequest(c.name, "Report.FindReports", in)
	out := new(ReportsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) PostReport(ctx context.Context, in *PostReportBundle, opts ...client.CallOption) (*PostReportResponse, error) {
	req := c.c.NewRequest(c.name, "Report.PostReport", in)
	out := new(PostReportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) PostTemplate(ctx context.Context, in *PostTemplateBundle, opts ...client.CallOption) (*PostTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "Report.PostTemplate", in)
	out := new(PostTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) FindTemplates(ctx context.Context, in *FindTemplatesRequest, opts ...client.CallOption) (*TemplatesResponse, error) {
	req := c.c.NewRequest(c.name, "Report.FindTemplates", in)
	out := new(TemplatesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) FindOneReport(ctx context.Context, in *ByIDRequest, opts ...client.CallOption) (*ReportResponse, error) {
	req := c.c.NewRequest(c.name, "Report.FindOneReport", in)
	out := new(ReportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) FindOneTemplate(ctx context.Context, in *ByTemplateIDRequest, opts ...client.CallOption) (*TemplateResponse, error) {
	req := c.c.NewRequest(c.name, "Report.FindOneTemplate", in)
	out := new(TemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) UpdateTemplate(ctx context.Context, in *UpdateTemplateBundle, opts ...client.CallOption) (*UpdatedTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "Report.UpdateTemplate", in)
	out := new(UpdatedTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...client.CallOption) (*DeletedResponse, error) {
	req := c.c.NewRequest(c.name, "Report.DeleteTemplate", in)
	out := new(DeletedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) ToggleTemplateEnableState(ctx context.Context, in *ToggleTemplateEnableReq, opts ...client.CallOption) (*UpdatedTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "Report.ToggleTemplateEnableState", in)
	out := new(UpdatedTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Report service

type ReportHandler interface {
	FindReports(context.Context, *FindReportsRequest, *ReportsResponse) error
	PostReport(context.Context, *PostReportBundle, *PostReportResponse) error
	PostTemplate(context.Context, *PostTemplateBundle, *PostTemplateResponse) error
	FindTemplates(context.Context, *FindTemplatesRequest, *TemplatesResponse) error
	FindOneReport(context.Context, *ByIDRequest, *ReportResponse) error
	FindOneTemplate(context.Context, *ByTemplateIDRequest, *TemplateResponse) error
	UpdateTemplate(context.Context, *UpdateTemplateBundle, *UpdatedTemplateResponse) error
	DeleteTemplate(context.Context, *DeleteTemplateRequest, *DeletedResponse) error
	ToggleTemplateEnableState(context.Context, *ToggleTemplateEnableReq, *UpdatedTemplateResponse) error
}

func RegisterReportHandler(s server.Server, hdlr ReportHandler, opts ...server.HandlerOption) {
	type report interface {
		FindReports(ctx context.Context, in *FindReportsRequest, out *ReportsResponse) error
		PostReport(ctx context.Context, in *PostReportBundle, out *PostReportResponse) error
		PostTemplate(ctx context.Context, in *PostTemplateBundle, out *PostTemplateResponse) error
		FindTemplates(ctx context.Context, in *FindTemplatesRequest, out *TemplatesResponse) error
		FindOneReport(ctx context.Context, in *ByIDRequest, out *ReportResponse) error
		FindOneTemplate(ctx context.Context, in *ByTemplateIDRequest, out *TemplateResponse) error
		UpdateTemplate(ctx context.Context, in *UpdateTemplateBundle, out *UpdatedTemplateResponse) error
		DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, out *DeletedResponse) error
		ToggleTemplateEnableState(ctx context.Context, in *ToggleTemplateEnableReq, out *UpdatedTemplateResponse) error
	}
	type Report struct {
		report
	}
	h := &reportHandler{hdlr}
	s.Handle(s.NewHandler(&Report{h}, opts...))
}

type reportHandler struct {
	ReportHandler
}

func (h *reportHandler) FindReports(ctx context.Context, in *FindReportsRequest, out *ReportsResponse) error {
	return h.ReportHandler.FindReports(ctx, in, out)
}

func (h *reportHandler) PostReport(ctx context.Context, in *PostReportBundle, out *PostReportResponse) error {
	return h.ReportHandler.PostReport(ctx, in, out)
}

func (h *reportHandler) PostTemplate(ctx context.Context, in *PostTemplateBundle, out *PostTemplateResponse) error {
	return h.ReportHandler.PostTemplate(ctx, in, out)
}

func (h *reportHandler) FindTemplates(ctx context.Context, in *FindTemplatesRequest, out *TemplatesResponse) error {
	return h.ReportHandler.FindTemplates(ctx, in, out)
}

func (h *reportHandler) FindOneReport(ctx context.Context, in *ByIDRequest, out *ReportResponse) error {
	return h.ReportHandler.FindOneReport(ctx, in, out)
}

func (h *reportHandler) FindOneTemplate(ctx context.Context, in *ByTemplateIDRequest, out *TemplateResponse) error {
	return h.ReportHandler.FindOneTemplate(ctx, in, out)
}

func (h *reportHandler) UpdateTemplate(ctx context.Context, in *UpdateTemplateBundle, out *UpdatedTemplateResponse) error {
	return h.ReportHandler.UpdateTemplate(ctx, in, out)
}

func (h *reportHandler) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, out *DeletedResponse) error {
	return h.ReportHandler.DeleteTemplate(ctx, in, out)
}

func (h *reportHandler) ToggleTemplateEnableState(ctx context.Context, in *ToggleTemplateEnableReq, out *UpdatedTemplateResponse) error {
	return h.ReportHandler.ToggleTemplateEnableState(ctx, in, out)
}
