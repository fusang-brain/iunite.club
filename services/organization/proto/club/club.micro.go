// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/club/club.proto

/*
Package iunite_club_srv_organization_club is a generated protocol buffer package.

It is generated from these files:
	proto/club/club.proto

It has these top-level messages:
	ByUserClubProfileIDRequest
	AcceptResponse
	UserClubProfilesResponse
	FindUserClubProfilesRequest
	RemoveUserFromClubRequest
	GetUserClubProfileDetailsByIDRequest
	UserClubProfileResponse
	GetUserClubProfilesByUserIDRequest
	UserClubProfilesListResponse
	GetClubsBySchoolIDRequest
	UpdateClubInfoRequest
	UpdatedResponse
	GetClubByIDRequest
	ClubDetailsResponse
	FindRefusedAcceptRequest
	SearchClubRequest
	ExecuteJoinClubAcceptRequest
	Response
	AcceptJoinOneClubRequest
	GetClubsByUserIDRequest
	CreateClubRequest
	CreateClubResponse
	GetClubListRequest
	ClubListResponse
	AcceptListResponse
*/
package iunite_club_srv_organization_club

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "iunite.club/services/organization/proto"
import _ "github.com/golang/protobuf/ptypes/any"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Club service

type ClubService interface {
	CreateClub(ctx context.Context, in *CreateClubRequest, opts ...client.CallOption) (*CreateClubResponse, error)
	// FindClubListByPage 获取社团列表
	FindClubListByPage(ctx context.Context, in *GetClubListRequest, opts ...client.CallOption) (*ClubListResponse, error)
	GetClubsByUserID(ctx context.Context, in *GetClubsByUserIDRequest, opts ...client.CallOption) (*ClubListResponse, error)
	AcceptJoinOneClub(ctx context.Context, in *AcceptJoinOneClubRequest, opts ...client.CallOption) (*Response, error)
	ExecuteJoinClubAccept(ctx context.Context, in *ExecuteJoinClubAcceptRequest, opts ...client.CallOption) (*Response, error)
	SearchClubs(ctx context.Context, in *SearchClubRequest, opts ...client.CallOption) (*ClubListResponse, error)
	FindRefusedAcceptByUserID(ctx context.Context, in *FindRefusedAcceptRequest, opts ...client.CallOption) (*AcceptListResponse, error)
	FindClubDetailsByID(ctx context.Context, in *GetClubByIDRequest, opts ...client.CallOption) (*ClubDetailsResponse, error)
	UpdateClubInfo(ctx context.Context, in *UpdateClubInfoRequest, opts ...client.CallOption) (*UpdatedResponse, error)
	FindClubsBySchoolID(ctx context.Context, in *GetClubsBySchoolIDRequest, opts ...client.CallOption) (*ClubListResponse, error)
	GetUserClubProfilesByUserID(ctx context.Context, in *GetUserClubProfilesByUserIDRequest, opts ...client.CallOption) (*UserClubProfilesListResponse, error)
	GetUserClubProfileDetailsByID(ctx context.Context, in *GetUserClubProfileDetailsByIDRequest, opts ...client.CallOption) (*UserClubProfileResponse, error)
	// rcp GetOrganizationDetails()
	RemoveUserFromClub(ctx context.Context, in *RemoveUserFromClubRequest, opts ...client.CallOption) (*Response, error)
	FindUserClubProfiles(ctx context.Context, in *FindUserClubProfilesRequest, opts ...client.CallOption) (*UserClubProfilesResponse, error)
	FindAcceptByUserClubProfileID(ctx context.Context, in *ByUserClubProfileIDRequest, opts ...client.CallOption) (*AcceptResponse, error)
}

type clubService struct {
	c    client.Client
	name string
}

func NewClubService(name string, c client.Client) ClubService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.srv.organization.club"
	}
	return &clubService{
		c:    c,
		name: name,
	}
}

func (c *clubService) CreateClub(ctx context.Context, in *CreateClubRequest, opts ...client.CallOption) (*CreateClubResponse, error) {
	req := c.c.NewRequest(c.name, "Club.CreateClub", in)
	out := new(CreateClubResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) FindClubListByPage(ctx context.Context, in *GetClubListRequest, opts ...client.CallOption) (*ClubListResponse, error) {
	req := c.c.NewRequest(c.name, "Club.FindClubListByPage", in)
	out := new(ClubListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) GetClubsByUserID(ctx context.Context, in *GetClubsByUserIDRequest, opts ...client.CallOption) (*ClubListResponse, error) {
	req := c.c.NewRequest(c.name, "Club.GetClubsByUserID", in)
	out := new(ClubListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) AcceptJoinOneClub(ctx context.Context, in *AcceptJoinOneClubRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Club.AcceptJoinOneClub", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) ExecuteJoinClubAccept(ctx context.Context, in *ExecuteJoinClubAcceptRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Club.ExecuteJoinClubAccept", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) SearchClubs(ctx context.Context, in *SearchClubRequest, opts ...client.CallOption) (*ClubListResponse, error) {
	req := c.c.NewRequest(c.name, "Club.SearchClubs", in)
	out := new(ClubListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) FindRefusedAcceptByUserID(ctx context.Context, in *FindRefusedAcceptRequest, opts ...client.CallOption) (*AcceptListResponse, error) {
	req := c.c.NewRequest(c.name, "Club.FindRefusedAcceptByUserID", in)
	out := new(AcceptListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) FindClubDetailsByID(ctx context.Context, in *GetClubByIDRequest, opts ...client.CallOption) (*ClubDetailsResponse, error) {
	req := c.c.NewRequest(c.name, "Club.FindClubDetailsByID", in)
	out := new(ClubDetailsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) UpdateClubInfo(ctx context.Context, in *UpdateClubInfoRequest, opts ...client.CallOption) (*UpdatedResponse, error) {
	req := c.c.NewRequest(c.name, "Club.UpdateClubInfo", in)
	out := new(UpdatedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) FindClubsBySchoolID(ctx context.Context, in *GetClubsBySchoolIDRequest, opts ...client.CallOption) (*ClubListResponse, error) {
	req := c.c.NewRequest(c.name, "Club.FindClubsBySchoolID", in)
	out := new(ClubListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) GetUserClubProfilesByUserID(ctx context.Context, in *GetUserClubProfilesByUserIDRequest, opts ...client.CallOption) (*UserClubProfilesListResponse, error) {
	req := c.c.NewRequest(c.name, "Club.GetUserClubProfilesByUserID", in)
	out := new(UserClubProfilesListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) GetUserClubProfileDetailsByID(ctx context.Context, in *GetUserClubProfileDetailsByIDRequest, opts ...client.CallOption) (*UserClubProfileResponse, error) {
	req := c.c.NewRequest(c.name, "Club.GetUserClubProfileDetailsByID", in)
	out := new(UserClubProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) RemoveUserFromClub(ctx context.Context, in *RemoveUserFromClubRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Club.RemoveUserFromClub", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) FindUserClubProfiles(ctx context.Context, in *FindUserClubProfilesRequest, opts ...client.CallOption) (*UserClubProfilesResponse, error) {
	req := c.c.NewRequest(c.name, "Club.FindUserClubProfiles", in)
	out := new(UserClubProfilesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) FindAcceptByUserClubProfileID(ctx context.Context, in *ByUserClubProfileIDRequest, opts ...client.CallOption) (*AcceptResponse, error) {
	req := c.c.NewRequest(c.name, "Club.FindAcceptByUserClubProfileID", in)
	out := new(AcceptResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Club service

type ClubHandler interface {
	CreateClub(context.Context, *CreateClubRequest, *CreateClubResponse) error
	// FindClubListByPage 获取社团列表
	FindClubListByPage(context.Context, *GetClubListRequest, *ClubListResponse) error
	GetClubsByUserID(context.Context, *GetClubsByUserIDRequest, *ClubListResponse) error
	AcceptJoinOneClub(context.Context, *AcceptJoinOneClubRequest, *Response) error
	ExecuteJoinClubAccept(context.Context, *ExecuteJoinClubAcceptRequest, *Response) error
	SearchClubs(context.Context, *SearchClubRequest, *ClubListResponse) error
	FindRefusedAcceptByUserID(context.Context, *FindRefusedAcceptRequest, *AcceptListResponse) error
	FindClubDetailsByID(context.Context, *GetClubByIDRequest, *ClubDetailsResponse) error
	UpdateClubInfo(context.Context, *UpdateClubInfoRequest, *UpdatedResponse) error
	FindClubsBySchoolID(context.Context, *GetClubsBySchoolIDRequest, *ClubListResponse) error
	GetUserClubProfilesByUserID(context.Context, *GetUserClubProfilesByUserIDRequest, *UserClubProfilesListResponse) error
	GetUserClubProfileDetailsByID(context.Context, *GetUserClubProfileDetailsByIDRequest, *UserClubProfileResponse) error
	// rcp GetOrganizationDetails()
	RemoveUserFromClub(context.Context, *RemoveUserFromClubRequest, *Response) error
	FindUserClubProfiles(context.Context, *FindUserClubProfilesRequest, *UserClubProfilesResponse) error
	FindAcceptByUserClubProfileID(context.Context, *ByUserClubProfileIDRequest, *AcceptResponse) error
}

func RegisterClubHandler(s server.Server, hdlr ClubHandler, opts ...server.HandlerOption) {
	type club interface {
		CreateClub(ctx context.Context, in *CreateClubRequest, out *CreateClubResponse) error
		FindClubListByPage(ctx context.Context, in *GetClubListRequest, out *ClubListResponse) error
		GetClubsByUserID(ctx context.Context, in *GetClubsByUserIDRequest, out *ClubListResponse) error
		AcceptJoinOneClub(ctx context.Context, in *AcceptJoinOneClubRequest, out *Response) error
		ExecuteJoinClubAccept(ctx context.Context, in *ExecuteJoinClubAcceptRequest, out *Response) error
		SearchClubs(ctx context.Context, in *SearchClubRequest, out *ClubListResponse) error
		FindRefusedAcceptByUserID(ctx context.Context, in *FindRefusedAcceptRequest, out *AcceptListResponse) error
		FindClubDetailsByID(ctx context.Context, in *GetClubByIDRequest, out *ClubDetailsResponse) error
		UpdateClubInfo(ctx context.Context, in *UpdateClubInfoRequest, out *UpdatedResponse) error
		FindClubsBySchoolID(ctx context.Context, in *GetClubsBySchoolIDRequest, out *ClubListResponse) error
		GetUserClubProfilesByUserID(ctx context.Context, in *GetUserClubProfilesByUserIDRequest, out *UserClubProfilesListResponse) error
		GetUserClubProfileDetailsByID(ctx context.Context, in *GetUserClubProfileDetailsByIDRequest, out *UserClubProfileResponse) error
		RemoveUserFromClub(ctx context.Context, in *RemoveUserFromClubRequest, out *Response) error
		FindUserClubProfiles(ctx context.Context, in *FindUserClubProfilesRequest, out *UserClubProfilesResponse) error
		FindAcceptByUserClubProfileID(ctx context.Context, in *ByUserClubProfileIDRequest, out *AcceptResponse) error
	}
	type Club struct {
		club
	}
	h := &clubHandler{hdlr}
	s.Handle(s.NewHandler(&Club{h}, opts...))
}

type clubHandler struct {
	ClubHandler
}

func (h *clubHandler) CreateClub(ctx context.Context, in *CreateClubRequest, out *CreateClubResponse) error {
	return h.ClubHandler.CreateClub(ctx, in, out)
}

func (h *clubHandler) FindClubListByPage(ctx context.Context, in *GetClubListRequest, out *ClubListResponse) error {
	return h.ClubHandler.FindClubListByPage(ctx, in, out)
}

func (h *clubHandler) GetClubsByUserID(ctx context.Context, in *GetClubsByUserIDRequest, out *ClubListResponse) error {
	return h.ClubHandler.GetClubsByUserID(ctx, in, out)
}

func (h *clubHandler) AcceptJoinOneClub(ctx context.Context, in *AcceptJoinOneClubRequest, out *Response) error {
	return h.ClubHandler.AcceptJoinOneClub(ctx, in, out)
}

func (h *clubHandler) ExecuteJoinClubAccept(ctx context.Context, in *ExecuteJoinClubAcceptRequest, out *Response) error {
	return h.ClubHandler.ExecuteJoinClubAccept(ctx, in, out)
}

func (h *clubHandler) SearchClubs(ctx context.Context, in *SearchClubRequest, out *ClubListResponse) error {
	return h.ClubHandler.SearchClubs(ctx, in, out)
}

func (h *clubHandler) FindRefusedAcceptByUserID(ctx context.Context, in *FindRefusedAcceptRequest, out *AcceptListResponse) error {
	return h.ClubHandler.FindRefusedAcceptByUserID(ctx, in, out)
}

func (h *clubHandler) FindClubDetailsByID(ctx context.Context, in *GetClubByIDRequest, out *ClubDetailsResponse) error {
	return h.ClubHandler.FindClubDetailsByID(ctx, in, out)
}

func (h *clubHandler) UpdateClubInfo(ctx context.Context, in *UpdateClubInfoRequest, out *UpdatedResponse) error {
	return h.ClubHandler.UpdateClubInfo(ctx, in, out)
}

func (h *clubHandler) FindClubsBySchoolID(ctx context.Context, in *GetClubsBySchoolIDRequest, out *ClubListResponse) error {
	return h.ClubHandler.FindClubsBySchoolID(ctx, in, out)
}

func (h *clubHandler) GetUserClubProfilesByUserID(ctx context.Context, in *GetUserClubProfilesByUserIDRequest, out *UserClubProfilesListResponse) error {
	return h.ClubHandler.GetUserClubProfilesByUserID(ctx, in, out)
}

func (h *clubHandler) GetUserClubProfileDetailsByID(ctx context.Context, in *GetUserClubProfileDetailsByIDRequest, out *UserClubProfileResponse) error {
	return h.ClubHandler.GetUserClubProfileDetailsByID(ctx, in, out)
}

func (h *clubHandler) RemoveUserFromClub(ctx context.Context, in *RemoveUserFromClubRequest, out *Response) error {
	return h.ClubHandler.RemoveUserFromClub(ctx, in, out)
}

func (h *clubHandler) FindUserClubProfiles(ctx context.Context, in *FindUserClubProfilesRequest, out *UserClubProfilesResponse) error {
	return h.ClubHandler.FindUserClubProfiles(ctx, in, out)
}

func (h *clubHandler) FindAcceptByUserClubProfileID(ctx context.Context, in *ByUserClubProfileIDRequest, out *AcceptResponse) error {
	return h.ClubHandler.FindAcceptByUserClubProfileID(ctx, in, out)
}
