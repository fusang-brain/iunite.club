// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/department/department.proto

/*
Package iunite_club_srv_organization_department is a generated protocol buffer package.

It is generated from these files:
	proto/department/department.proto

It has these top-level messages:
	SearchDepartmentRequest
	UserListResponse
	UserFromDepartmentRequest
	ListByDepartmentIDRequest
	ListByClubIDRequest
	GetDepartmentWithIDRequest
	DepartmentResponse
	CreateDepartmentRequest
	CreateDepartmentResponse
	UpdateDepartmentRequest
	UpdateDepartmentResponse
	RemoveDepartmentRequest
	RemoveDepartmentResponse
	DepartmentListByParentIDRequest
	DepartmentListResponse
*/
package iunite_club_srv_organization_department

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "iunite.club/services/organization/proto"
import _ "iunite.club/services/user/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Department service

type DepartmentService interface {
	CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...client.CallOption) (*CreateDepartmentResponse, error)
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...client.CallOption) (*UpdateDepartmentResponse, error)
	RemoveDepartment(ctx context.Context, in *RemoveDepartmentRequest, opts ...client.CallOption) (*RemoveDepartmentResponse, error)
	GetDepartmentListByParentID(ctx context.Context, in *DepartmentListByParentIDRequest, opts ...client.CallOption) (*DepartmentListResponse, error)
	GetDepartmentDetails(ctx context.Context, in *GetDepartmentWithIDRequest, opts ...client.CallOption) (*DepartmentResponse, error)
	AddUsersToDepartment(ctx context.Context, in *UserFromDepartmentRequest, opts ...client.CallOption) (*UpdateDepartmentResponse, error)
	RemoveUsersFromDepartment(ctx context.Context, in *UserFromDepartmentRequest, opts ...client.CallOption) (*UpdateDepartmentResponse, error)
	GetUsersByDepartmentID(ctx context.Context, in *ListByDepartmentIDRequest, opts ...client.CallOption) (*UserListResponse, error)
	GetAllCanSelectUsers(ctx context.Context, in *ListByClubIDRequest, opts ...client.CallOption) (*UserListResponse, error)
	SearchDepartment(ctx context.Context, in *SearchDepartmentRequest, opts ...client.CallOption) (*DepartmentListResponse, error)
}

type departmentService struct {
	c    client.Client
	name string
}

func NewDepartmentService(name string, c client.Client) DepartmentService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.srv.organization.department"
	}
	return &departmentService{
		c:    c,
		name: name,
	}
}

func (c *departmentService) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...client.CallOption) (*CreateDepartmentResponse, error) {
	req := c.c.NewRequest(c.name, "Department.CreateDepartment", in)
	out := new(CreateDepartmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentService) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...client.CallOption) (*UpdateDepartmentResponse, error) {
	req := c.c.NewRequest(c.name, "Department.UpdateDepartment", in)
	out := new(UpdateDepartmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentService) RemoveDepartment(ctx context.Context, in *RemoveDepartmentRequest, opts ...client.CallOption) (*RemoveDepartmentResponse, error) {
	req := c.c.NewRequest(c.name, "Department.RemoveDepartment", in)
	out := new(RemoveDepartmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentService) GetDepartmentListByParentID(ctx context.Context, in *DepartmentListByParentIDRequest, opts ...client.CallOption) (*DepartmentListResponse, error) {
	req := c.c.NewRequest(c.name, "Department.GetDepartmentListByParentID", in)
	out := new(DepartmentListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentService) GetDepartmentDetails(ctx context.Context, in *GetDepartmentWithIDRequest, opts ...client.CallOption) (*DepartmentResponse, error) {
	req := c.c.NewRequest(c.name, "Department.GetDepartmentDetails", in)
	out := new(DepartmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentService) AddUsersToDepartment(ctx context.Context, in *UserFromDepartmentRequest, opts ...client.CallOption) (*UpdateDepartmentResponse, error) {
	req := c.c.NewRequest(c.name, "Department.AddUsersToDepartment", in)
	out := new(UpdateDepartmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentService) RemoveUsersFromDepartment(ctx context.Context, in *UserFromDepartmentRequest, opts ...client.CallOption) (*UpdateDepartmentResponse, error) {
	req := c.c.NewRequest(c.name, "Department.RemoveUsersFromDepartment", in)
	out := new(UpdateDepartmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentService) GetUsersByDepartmentID(ctx context.Context, in *ListByDepartmentIDRequest, opts ...client.CallOption) (*UserListResponse, error) {
	req := c.c.NewRequest(c.name, "Department.GetUsersByDepartmentID", in)
	out := new(UserListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentService) GetAllCanSelectUsers(ctx context.Context, in *ListByClubIDRequest, opts ...client.CallOption) (*UserListResponse, error) {
	req := c.c.NewRequest(c.name, "Department.GetAllCanSelectUsers", in)
	out := new(UserListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentService) SearchDepartment(ctx context.Context, in *SearchDepartmentRequest, opts ...client.CallOption) (*DepartmentListResponse, error) {
	req := c.c.NewRequest(c.name, "Department.SearchDepartment", in)
	out := new(DepartmentListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Department service

type DepartmentHandler interface {
	CreateDepartment(context.Context, *CreateDepartmentRequest, *CreateDepartmentResponse) error
	UpdateDepartment(context.Context, *UpdateDepartmentRequest, *UpdateDepartmentResponse) error
	RemoveDepartment(context.Context, *RemoveDepartmentRequest, *RemoveDepartmentResponse) error
	GetDepartmentListByParentID(context.Context, *DepartmentListByParentIDRequest, *DepartmentListResponse) error
	GetDepartmentDetails(context.Context, *GetDepartmentWithIDRequest, *DepartmentResponse) error
	AddUsersToDepartment(context.Context, *UserFromDepartmentRequest, *UpdateDepartmentResponse) error
	RemoveUsersFromDepartment(context.Context, *UserFromDepartmentRequest, *UpdateDepartmentResponse) error
	GetUsersByDepartmentID(context.Context, *ListByDepartmentIDRequest, *UserListResponse) error
	GetAllCanSelectUsers(context.Context, *ListByClubIDRequest, *UserListResponse) error
	SearchDepartment(context.Context, *SearchDepartmentRequest, *DepartmentListResponse) error
}

func RegisterDepartmentHandler(s server.Server, hdlr DepartmentHandler, opts ...server.HandlerOption) {
	type department interface {
		CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, out *CreateDepartmentResponse) error
		UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, out *UpdateDepartmentResponse) error
		RemoveDepartment(ctx context.Context, in *RemoveDepartmentRequest, out *RemoveDepartmentResponse) error
		GetDepartmentListByParentID(ctx context.Context, in *DepartmentListByParentIDRequest, out *DepartmentListResponse) error
		GetDepartmentDetails(ctx context.Context, in *GetDepartmentWithIDRequest, out *DepartmentResponse) error
		AddUsersToDepartment(ctx context.Context, in *UserFromDepartmentRequest, out *UpdateDepartmentResponse) error
		RemoveUsersFromDepartment(ctx context.Context, in *UserFromDepartmentRequest, out *UpdateDepartmentResponse) error
		GetUsersByDepartmentID(ctx context.Context, in *ListByDepartmentIDRequest, out *UserListResponse) error
		GetAllCanSelectUsers(ctx context.Context, in *ListByClubIDRequest, out *UserListResponse) error
		SearchDepartment(ctx context.Context, in *SearchDepartmentRequest, out *DepartmentListResponse) error
	}
	type Department struct {
		department
	}
	h := &departmentHandler{hdlr}
	s.Handle(s.NewHandler(&Department{h}, opts...))
}

type departmentHandler struct {
	DepartmentHandler
}

func (h *departmentHandler) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, out *CreateDepartmentResponse) error {
	return h.DepartmentHandler.CreateDepartment(ctx, in, out)
}

func (h *departmentHandler) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, out *UpdateDepartmentResponse) error {
	return h.DepartmentHandler.UpdateDepartment(ctx, in, out)
}

func (h *departmentHandler) RemoveDepartment(ctx context.Context, in *RemoveDepartmentRequest, out *RemoveDepartmentResponse) error {
	return h.DepartmentHandler.RemoveDepartment(ctx, in, out)
}

func (h *departmentHandler) GetDepartmentListByParentID(ctx context.Context, in *DepartmentListByParentIDRequest, out *DepartmentListResponse) error {
	return h.DepartmentHandler.GetDepartmentListByParentID(ctx, in, out)
}

func (h *departmentHandler) GetDepartmentDetails(ctx context.Context, in *GetDepartmentWithIDRequest, out *DepartmentResponse) error {
	return h.DepartmentHandler.GetDepartmentDetails(ctx, in, out)
}

func (h *departmentHandler) AddUsersToDepartment(ctx context.Context, in *UserFromDepartmentRequest, out *UpdateDepartmentResponse) error {
	return h.DepartmentHandler.AddUsersToDepartment(ctx, in, out)
}

func (h *departmentHandler) RemoveUsersFromDepartment(ctx context.Context, in *UserFromDepartmentRequest, out *UpdateDepartmentResponse) error {
	return h.DepartmentHandler.RemoveUsersFromDepartment(ctx, in, out)
}

func (h *departmentHandler) GetUsersByDepartmentID(ctx context.Context, in *ListByDepartmentIDRequest, out *UserListResponse) error {
	return h.DepartmentHandler.GetUsersByDepartmentID(ctx, in, out)
}

func (h *departmentHandler) GetAllCanSelectUsers(ctx context.Context, in *ListByClubIDRequest, out *UserListResponse) error {
	return h.DepartmentHandler.GetAllCanSelectUsers(ctx, in, out)
}

func (h *departmentHandler) SearchDepartment(ctx context.Context, in *SearchDepartmentRequest, out *DepartmentListResponse) error {
	return h.DepartmentHandler.SearchDepartment(ctx, in, out)
}
