// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/school/school.proto

/*
Package iunite_club_srv_organization_school is a generated protocol buffer package.

It is generated from these files:
	proto/school/school.proto

It has these top-level messages:
	SearchSchoolsRequest
	GetSchoolRequest
	SchoolResponse
	CreateSchoolRequest
	CreateSchoolResponse
	ListRequest
	ListResponse
	School
*/
package iunite_club_srv_organization_school

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SchoolSrv service

type SchoolSrvService interface {
	CreateSchool(ctx context.Context, in *CreateSchoolRequest, opts ...client.CallOption) (*CreateSchoolResponse, error)
	GetSchoolList(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	GetSchoolByID(ctx context.Context, in *GetSchoolRequest, opts ...client.CallOption) (*SchoolResponse, error)
	SearchSchools(ctx context.Context, in *SearchSchoolsRequest, opts ...client.CallOption) (*ListResponse, error)
}

type schoolSrvService struct {
	c    client.Client
	name string
}

func NewSchoolSrvService(name string, c client.Client) SchoolSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "iunite.club.srv.organization.school"
	}
	return &schoolSrvService{
		c:    c,
		name: name,
	}
}

func (c *schoolSrvService) CreateSchool(ctx context.Context, in *CreateSchoolRequest, opts ...client.CallOption) (*CreateSchoolResponse, error) {
	req := c.c.NewRequest(c.name, "SchoolSrv.CreateSchool", in)
	out := new(CreateSchoolResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolSrvService) GetSchoolList(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "SchoolSrv.GetSchoolList", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolSrvService) GetSchoolByID(ctx context.Context, in *GetSchoolRequest, opts ...client.CallOption) (*SchoolResponse, error) {
	req := c.c.NewRequest(c.name, "SchoolSrv.GetSchoolByID", in)
	out := new(SchoolResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolSrvService) SearchSchools(ctx context.Context, in *SearchSchoolsRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "SchoolSrv.SearchSchools", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SchoolSrv service

type SchoolSrvHandler interface {
	CreateSchool(context.Context, *CreateSchoolRequest, *CreateSchoolResponse) error
	GetSchoolList(context.Context, *ListRequest, *ListResponse) error
	GetSchoolByID(context.Context, *GetSchoolRequest, *SchoolResponse) error
	SearchSchools(context.Context, *SearchSchoolsRequest, *ListResponse) error
}

func RegisterSchoolSrvHandler(s server.Server, hdlr SchoolSrvHandler, opts ...server.HandlerOption) {
	type schoolSrv interface {
		CreateSchool(ctx context.Context, in *CreateSchoolRequest, out *CreateSchoolResponse) error
		GetSchoolList(ctx context.Context, in *ListRequest, out *ListResponse) error
		GetSchoolByID(ctx context.Context, in *GetSchoolRequest, out *SchoolResponse) error
		SearchSchools(ctx context.Context, in *SearchSchoolsRequest, out *ListResponse) error
	}
	type SchoolSrv struct {
		schoolSrv
	}
	h := &schoolSrvHandler{hdlr}
	s.Handle(s.NewHandler(&SchoolSrv{h}, opts...))
}

type schoolSrvHandler struct {
	SchoolSrvHandler
}

func (h *schoolSrvHandler) CreateSchool(ctx context.Context, in *CreateSchoolRequest, out *CreateSchoolResponse) error {
	return h.SchoolSrvHandler.CreateSchool(ctx, in, out)
}

func (h *schoolSrvHandler) GetSchoolList(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.SchoolSrvHandler.GetSchoolList(ctx, in, out)
}

func (h *schoolSrvHandler) GetSchoolByID(ctx context.Context, in *GetSchoolRequest, out *SchoolResponse) error {
	return h.SchoolSrvHandler.GetSchoolByID(ctx, in, out)
}

func (h *schoolSrvHandler) SearchSchools(ctx context.Context, in *SearchSchoolsRequest, out *ListResponse) error {
	return h.SchoolSrvHandler.SearchSchools(ctx, in, out)
}
