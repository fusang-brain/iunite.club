// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api/navo/proto/school/school.proto

/*
Package kit_iron_api_navo_school is a generated protocol buffer package.

It is generated from these files:
	api/navo/proto/school/school.proto

It has these top-level messages:
*/
package kit_iron_api_navo_school

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_api "github.com/micro/go-api/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = go_api.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SchoolHandler service

type SchoolHandlerService interface {
	SchoolList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	SearchSchools(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Create(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type schoolHandlerService struct {
	c    client.Client
	name string
}

func NewSchoolHandlerService(name string, c client.Client) SchoolHandlerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "kit.iron.api.navo.school"
	}
	return &schoolHandlerService{
		c:    c,
		name: name,
	}
}

func (c *schoolHandlerService) SchoolList(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "SchoolHandler.SchoolList", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolHandlerService) SearchSchools(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "SchoolHandler.SearchSchools", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolHandlerService) Create(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "SchoolHandler.Create", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SchoolHandler service

type SchoolHandlerHandler interface {
	SchoolList(context.Context, *go_api.Request, *go_api.Response) error
	SearchSchools(context.Context, *go_api.Request, *go_api.Response) error
	Create(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterSchoolHandlerHandler(s server.Server, hdlr SchoolHandlerHandler, opts ...server.HandlerOption) error {
	type schoolHandler interface {
		SchoolList(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		SearchSchools(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Create(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type SchoolHandler struct {
		schoolHandler
	}
	h := &schoolHandlerHandler{hdlr}
	return s.Handle(s.NewHandler(&SchoolHandler{h}, opts...))
}

type schoolHandlerHandler struct {
	SchoolHandlerHandler
}

func (h *schoolHandlerHandler) SchoolList(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.SchoolHandlerHandler.SchoolList(ctx, in, out)
}

func (h *schoolHandlerHandler) SearchSchools(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.SchoolHandlerHandler.SearchSchools(ctx, in, out)
}

func (h *schoolHandlerHandler) Create(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.SchoolHandlerHandler.Create(ctx, in, out)
}
